
FACE_DETECTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006840  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b1c  08006b1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b24  08006b24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00025984  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200259f8  200259f8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114e3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fb  00000000  00000000  00031587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b70  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002341c  00000000  00000000  00035548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001147d  00000000  00000000  00058964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7293  00000000  00000000  00069de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141074  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003954  00000000  00000000  001410c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080069d8 	.word	0x080069d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080069d8 	.word	0x080069d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fdee 	bl	800116c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f842 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f96a 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 f948 	bl	800082c <MX_DMA_Init>
  MX_DCMI_Init();
 800059c:	f000 f8b4 	bl	8000708 <MX_DCMI_Init>
  MX_I2C2_Init();
 80005a0:	f000 f8da 	bl	8000758 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 f918 	bl	80007d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // inizializzazione OV7670
  if(ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2) != RET_OK){
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <main+0x78>)
 80005aa:	4916      	ldr	r1, [pc, #88]	; (8000604 <main+0x7c>)
 80005ac:	4816      	ldr	r0, [pc, #88]	; (8000608 <main+0x80>)
 80005ae:	f000 fa1b 	bl	80009e8 <ov7670_init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <main+0x34>
	  Error_Handler();
 80005b8:	f000 fa10 	bl	80009dc <Error_Handler>
  }
  ov7670_config(OV7670_MODE_QVGA_RGB565); // set QVGA e RGB565 ma mode inutile perchè già presettato in OV7670_reg di default
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa5b 	bl	8000a78 <ov7670_config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ov7670_startCap(OV7670_CAP_SINGLE_FRAME, immagine) != RET_OK)
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <main+0x84>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fa86 	bl	8000ad8 <ov7670_startCap>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <main+0x4e>
	   	 {
	   		Error_Handler();
 80005d2:	f000 fa03 	bl	80009dc <Error_Handler>
	   	 }
	  HAL_Delay(100);
 80005d6:	2064      	movs	r0, #100	; 0x64
 80005d8:	f000 fe3a 	bl	8001250 <HAL_Delay>
	  ov7670_stopCap();
 80005dc:	f000 faa6 	bl	8000b2c <ov7670_stopCap>
	  /*for(uint32_t i=1; i<imageLen*2; i+=2){
		  HAL_UART_Transmit(&huart1, immagine+i, 1, HAL_MAX_DELAY);
	  }*/

	  // uint32_t -> 4B da mandare su usart
	  HAL_UART_Transmit(&huart1, immagine, 4*imageLen, HAL_MAX_DELAY);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	4907      	ldr	r1, [pc, #28]	; (800060c <main+0x84>)
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x8c>)
 80005f2:	f004 ff9e 	bl	8005532 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f000 fe29 	bl	8001250 <HAL_Delay>
	  if(ov7670_startCap(OV7670_CAP_SINGLE_FRAME, immagine) != RET_OK)
 80005fe:	e7e0      	b.n	80005c2 <main+0x3a>
 8000600:	200000ac 	.word	0x200000ac
 8000604:	20000100 	.word	0x20000100
 8000608:	20000160 	.word	0x20000160
 800060c:	200001e4 	.word	0x200001e4
 8000610:	20000000 	.word	0x20000000
 8000614:	200001a0 	.word	0x200001a0

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 fc31 	bl	8005e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <SystemClock_Config+0xe8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <SystemClock_Config+0xe8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xe8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xec>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xec>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xec>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800068c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fa4a 	bl	8004b38 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 f997 	bl	80009dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ae:	f004 f9f3 	bl	8004a98 <HAL_PWREx_EnableOverDrive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006b8:	f000 f990 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fca4 	bl	8005028 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006e6:	f000 f979 	bl	80009dc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 80006ea:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80006ee:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80006f2:	2000      	movs	r0, #0
 80006f4:	f004 fd7e 	bl	80051f4 <HAL_RCC_MCOConfig>
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_DCMI_Init+0x48>)
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <MX_DCMI_Init+0x4c>)
 8000710:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_DCMI_Init+0x48>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_DCMI_Init+0x48>)
 800071a:	2220      	movs	r2, #32
 800071c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_DCMI_Init+0x48>)
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_DCMI_Init+0x48>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_DCMI_Init+0x48>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_DCMI_Init+0x48>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_DCMI_Init+0x48>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_DCMI_Init+0x48>)
 800073e:	f001 f86f 	bl	8001820 <HAL_DCMI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000748:	f000 f948 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000160 	.word	0x20000160
 8000754:	50050000 	.word	0x50050000

08000758 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C2_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C2_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C2_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C2_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C2_Init+0x74>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_I2C2_Init+0x74>)
 8000796:	f002 ffdf 	bl	8003758 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f91c 	bl	80009dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C2_Init+0x74>)
 80007a8:	f004 f8fb 	bl	80049a2 <HAL_I2CEx_ConfigAnalogFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007b2:	f000 f913 	bl	80009dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C2_Init+0x74>)
 80007ba:	f004 f92e 	bl	8004a1a <HAL_I2CEx_ConfigDigitalFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f90a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	40005800 	.word	0x40005800
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART1_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000810:	f004 fe42 	bl	8005498 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8df 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001a0 	.word	0x200001a0
 8000828:	40011000 	.word	0x40011000

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_DMA_Init+0x3c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <MX_DMA_Init+0x3c>)
 800083c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_DMA_Init+0x3c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2039      	movs	r0, #57	; 0x39
 8000854:	f000 fdfb 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000858:	2039      	movs	r0, #57	; 0x39
 800085a:	f000 fe14 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a4f      	ldr	r2, [pc, #316]	; (80009c8 <MX_GPIO_Init+0x15c>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a48      	ldr	r2, [pc, #288]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a3a      	ldr	r2, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x15c>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_GPIO_Init+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RESET_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000930:	4826      	ldr	r0, [pc, #152]	; (80009cc <MX_GPIO_Init+0x160>)
 8000932:	f002 fef7 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CAMERA_RESET_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800093c:	4824      	ldr	r0, [pc, #144]	; (80009d0 <MX_GPIO_Init+0x164>)
 800093e:	f002 fef1 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000942:	2304      	movs	r3, #4
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000952:	230c      	movs	r3, #12
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x168>)
 800095e:	f002 fd35 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin PD13 */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|GPIO_PIN_13;
 8000962:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_GPIO_Init+0x160>)
 800097c:	f002 fd26 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_GPIO_Init+0x16c>)
 800099e:	f002 fd15 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_RESET_Pin ERR_LED_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|ERR_LED_Pin;
 80009a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x164>)
 80009bc:	f002 fd06 	bl	80033cc <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3730      	adds	r7, #48	; 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80009f4:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <ov7670_init+0x78>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <ov7670_init+0x7c>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <ov7670_init+0x80>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0x0;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <ov7670_init+0x84>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <ov7670_init+0x88>)
 8000a14:	f002 fe86 	bl	8003724 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f000 fc19 	bl	8001250 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <ov7670_init+0x88>)
 8000a26:	f002 fe7d 	bl	8003724 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f000 fc10 	bl	8001250 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	2012      	movs	r0, #18
 8000a34:	f000 f886 	bl	8000b44 <ov7670_write>
  HAL_Delay(30);
 8000a38:	201e      	movs	r0, #30
 8000a3a:	f000 fc09 	bl	8001250 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	200b      	movs	r0, #11
 8000a46:	f000 f89d 	bl	8000b84 <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000a4a:	7d3b      	ldrb	r3, [r7, #20]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <ov7670_init+0x8c>)
 8000a50:	f005 fdbe 	bl	80065d0 <iprintf>


  return RET_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000090 	.word	0x20000090
 8000a64:	20000094 	.word	0x20000094
 8000a68:	20000098 	.word	0x20000098
 8000a6c:	2000009c 	.word	0x2000009c
 8000a70:	40021800 	.word	0x40021800
 8000a74:	080069f0 	.word	0x080069f0

08000a78 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000a80:	f000 f854 	bl	8000b2c <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // registro di selezione modalità: 0x80 -> 1000 0000 reset to default (YUV)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	2012      	movs	r0, #18
 8000a88:	f000 f85c 	bl	8000b44 <ov7670_write>
  HAL_Delay(30);
 8000a8c:	201e      	movs	r0, #30
 8000a8e:	f000 fbdf 	bl	8001250 <HAL_Delay>

  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e012      	b.n	8000abe <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <ov7670_config+0x5c>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <ov7670_config+0x5c>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	440b      	add	r3, r1
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4610      	mov	r0, r2
 8000aae:	f000 f849 	bl	8000b44 <ov7670_write>
    HAL_Delay(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 fbcc 	bl	8001250 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <ov7670_config+0x5c>)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ac6:	2bff      	cmp	r3, #255	; 0xff
 8000ac8:	d1e6      	bne.n	8000a98 <ov7670_config+0x20>
  }
  return RET_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08006a08 	.word	0x08006a08

08000ad8 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t buffer1)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8000ae2:	f000 f823 	bl	8000b2c <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = buffer1;
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <ov7670_startCap+0x4c>)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, buffer1, size_frame);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <ov7670_startCap+0x50>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	2100      	movs	r1, #0
 8000afe:	f000 fcdd 	bl	80014bc <HAL_DCMI_Start_DMA>
 8000b02:	e00a      	b.n	8000b1a <ov7670_startCap+0x42>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <ov7670_startCap+0x42>
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, buffer1, size_frame);
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <ov7670_startCap+0x50>)
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	2102      	movs	r1, #2
 8000b16:	f000 fcd1 	bl	80014bc <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000009c 	.word	0x2000009c
 8000b28:	20000090 	.word	0x20000090

08000b2c <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <ov7670_stopCap+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fd61 	bl	80015fc <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000090 	.word	0x20000090

08000b44 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <ov7670_write+0x3c>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	1dbb      	adds	r3, r7, #6
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2142      	movs	r1, #66	; 0x42
 8000b6c:	f003 fa5c 	bl	8004028 <HAL_I2C_Mem_Write>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000098 	.word	0x20000098

08000b84 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <ov7670_read+0x48>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	1dfa      	adds	r2, r7, #7
 8000b96:	2364      	movs	r3, #100	; 0x64
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2142      	movs	r1, #66	; 0x42
 8000b9e:	f002 ff1f 	bl	80039e0 <HAL_I2C_Master_Transmit>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <ov7670_read+0x48>)
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	2142      	movs	r1, #66	; 0x42
 8000bb4:	f003 f812 	bl	8003bdc <HAL_I2C_Master_Receive>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fc12 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a6f      	ldr	r2, [pc, #444]	; (8000dfc <HAL_DCMI_MspInit+0x1dc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 80d7 	bne.w	8000df2 <HAL_DCMI_MspInit+0x1d2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	4a6c      	ldr	r2, [pc, #432]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6353      	str	r3, [r2, #52]	; 0x34
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
 8000c5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8c:	4b5c      	ldr	r3, [pc, #368]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a50      	ldr	r2, [pc, #320]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_DCMI_MspInit+0x1e0>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cec:	2370      	movs	r3, #112	; 0x70
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfc:	230d      	movs	r3, #13
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	483f      	ldr	r0, [pc, #252]	; (8000e04 <HAL_DCMI_MspInit+0x1e4>)
 8000d08:	f002 fb60 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d0c:	2350      	movs	r3, #80	; 0x50
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d1c:	230d      	movs	r3, #13
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4838      	ldr	r0, [pc, #224]	; (8000e08 <HAL_DCMI_MspInit+0x1e8>)
 8000d28:	f002 fb50 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d2c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d3e:	230d      	movs	r3, #13
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4830      	ldr	r0, [pc, #192]	; (8000e0c <HAL_DCMI_MspInit+0x1ec>)
 8000d4a:	f002 fb3f 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d5e:	230d      	movs	r3, #13
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <HAL_DCMI_MspInit+0x1f0>)
 8000d6a:	f002 fb2f 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d80:	230d      	movs	r3, #13
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <HAL_DCMI_MspInit+0x1f4>)
 8000d8c:	f002 fb1e 	bl	80033cc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_DCMI_MspInit+0x1fc>)
 8000d94:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dce:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dd8:	f000 fd90 	bl	80018fc <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_DCMI_MspInit+0x1c6>
    {
      Error_Handler();
 8000de2:	f7ff fdfb 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_DCMI_MspInit+0x1f8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3738      	adds	r7, #56	; 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	50050000 	.word	0x50050000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40021800 	.word	0x40021800
 8000e18:	20000100 	.word	0x20000100
 8000e1c:	40026428 	.word	0x40026428

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_I2C_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12c      	bne.n	8000e9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e70:	2304      	movs	r3, #4
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <HAL_I2C_MspInit+0x8c>)
 8000e7c:	f002 faa6 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_I2C_MspInit+0x88>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40005800 	.word	0x40005800
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12c      	bne.n	8000f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000f28:	f002 fa50 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8000f4a:	f7ff fd47 	bl	80009dc <Error_Handler>
 8000f4e:	e7fc      	b.n	8000f4a <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f93e 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA2_Stream1_IRQHandler+0x10>)
 8000f9e:	f000 fe23 	bl	8001be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000100 	.word	0x20000100

08000fac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
	}

return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e009      	b.n	800100c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf1      	blt.n	8000ff8 <_write+0x12>
	}
	return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_close>:

int _close(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return -1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	605a      	str	r2, [r3, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f004 fd04 	bl	8005ac4 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20030000 	.word	0x20030000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	200259f8 	.word	0x200259f8

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f004 fe7b 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fa1d 	bl	8000588 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001150:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800115c:	08006b2c 	.word	0x08006b2c
  ldr r2, =_sbss
 8001160:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001164:	200259f8 	.word	0x200259f8

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f94f 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fd16 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f967 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000004 	.word	0x20000004
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200259e4 	.word	0x200259e4

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200259e4 	.word	0x200259e4

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000000c 	.word	0x2000000c

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_DCMI_Start_DMA+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e086      	b.n	80015ea <HAL_DCMI_Start_DMA+0x12e>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fa:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0202 	bic.w	r2, r2, #2
 800150a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	4a34      	ldr	r2, [pc, #208]	; (80015f4 <HAL_DCMI_Start_DMA+0x138>)
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_DCMI_Start_DMA+0x13c>)
 800152a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001530:	2200      	movs	r2, #0
 8001532:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	d20a      	bcs.n	800155e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3328      	adds	r3, #40	; 0x28
 8001552:	4619      	mov	r1, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	f000 fa7e 	bl	8001a58 <HAL_DMA_Start_IT>
 800155c:	e038      	b.n	80015d0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_DCMI_Start_DMA+0x138>)
 8001564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2201      	movs	r2, #1
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001578:	e009      	b.n	800158e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	085a      	lsrs	r2, r3, #1
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	005a      	lsls	r2, r3, #1
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d2f0      	bcs.n	800157a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	1e9a      	subs	r2, r3, #2
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	4619      	mov	r1, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	f000 fd76 	bl	80020bc <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	080016c9 	.word	0x080016c9
 80015f8:	080017f3 	.word	0x080017f3

080015fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_DCMI_Stop+0xb0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <HAL_DCMI_Stop+0xb4>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_DCMI_Stop+0x2a>
 8001622:	2302      	movs	r3, #2
 8001624:	e03e      	b.n	80016a4 <HAL_DCMI_Stop+0xa8>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	f043 0220 	orr.w	r2, r3, #32
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	73fb      	strb	r3, [r7, #15]
      break;
 8001660:	e006      	b.n	8001670 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ea      	bne.n	8001646 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800167e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fa3f 	bl	8001b08 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000004 	.word	0x20000004
 80016b0:	92492493 	.word	0x92492493

080016b4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d043      	beq.n	800176a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d118      	bne.n	800172e <DCMI_DMAXferCplt+0x66>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d015      	beq.n	800172e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	00da      	lsls	r2, r3, #3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	f001 fe15 	bl	800334c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	1e5a      	subs	r2, r3, #1
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
 800172c:	e044      	b.n	80017b8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d13c      	bne.n	80017b8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	00da      	lsls	r2, r3, #3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	2201      	movs	r2, #1
 8001758:	4619      	mov	r1, r3
 800175a:	f001 fdf7 	bl	800334c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
 8001768:	e026      	b.n	80017b8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e017      	b.n	80017b8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10f      	bne.n	80017b8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	0099      	lsls	r1, r3, #2
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	440a      	add	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d112      	bne.n	80017ea <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d103      	bne.n	80017ea <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff ff4e 	bl	80016b4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e05f      	b.n	80018f2 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff f9ea 	bl	8000c20 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff f9e7 	bl	8000c20 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001868:	f023 0308 	bic.w	r3, r3, #8
 800186c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001882:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800188e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800189a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d112      	bne.n	80018d2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7f5b      	ldrb	r3, [r3, #29]
 80018b6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018b8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7f9b      	ldrb	r3, [r3, #30]
 80018be:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018c0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7fdb      	ldrb	r3, [r3, #31]
 80018c8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018ce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018d0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 021e 	orr.w	r2, r2, #30
 80018e0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fc96 	bl	8001238 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e099      	b.n	8001a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001938:	e00f      	b.n	800195a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800193a:	f7ff fc7d 	bl	8001238 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b05      	cmp	r3, #5
 8001946:	d908      	bls.n	800195a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e078      	b.n	8001a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e8      	bne.n	800193a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_DMA_Init+0x158>)
 8001974:	4013      	ands	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d107      	bne.n	80019c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4313      	orrs	r3, r2
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f023 0307 	bic.w	r3, r3, #7
 80019da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d117      	bne.n	8001a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fadf 	bl	8001fc4 <DMA_CheckFifoParam>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e016      	b.n	8001a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fa96 	bl	8001f58 <DMA_CalcBaseAndBitshift>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	223f      	movs	r2, #63	; 0x3f
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f010803f 	.word	0xf010803f

08001a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Start_IT+0x26>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e040      	b.n	8001b00 <HAL_DMA_Start_IT+0xa8>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d12f      	bne.n	8001af2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 fa28 	bl	8001efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	223f      	movs	r2, #63	; 0x3f
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0216 	orr.w	r2, r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0208 	orr.w	r2, r2, #8
 8001ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e005      	b.n	8001afe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
 8001afc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b16:	f7ff fb8f 	bl	8001238 <HAL_GetTick>
 8001b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e052      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_Abort+0x62>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8a:	e013      	b.n	8001bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8c:	f7ff fb54 	bl	8001238 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d90c      	bls.n	8001bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e015      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e4      	bne.n	8001b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	223f      	movs	r2, #63	; 0x3f
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_DMA_IRQHandler+0x258>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a92      	ldr	r2, [pc, #584]	; (8001e44 <HAL_DMA_IRQHandler+0x25c>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2208      	movs	r2, #8
 8001c42:	409a      	lsls	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2201      	movs	r2, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2204      	movs	r2, #4
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2204      	movs	r2, #4
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d043      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03c      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d018      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
 8001d16:	e01f      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0208 	bic.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808e 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8086 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2220      	movs	r2, #32
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d136      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x1da>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	223f      	movs	r2, #63	; 0x3f
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d07d      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
        }
        return;
 8001dfe:	e078      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d030      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e02b      	b.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
 8001e3e:	e022      	b.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
 8001e40:	20000004 	.word	0x20000004
 8001e44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d032      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d307      	bcc.n	8001ece <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f2      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x2ca>
 8001ecc:	e000      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ece:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e000      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d108      	bne.n	8001f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3a:	e007      	b.n	8001f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b10      	subs	r3, #16
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <DMA_CalcBaseAndBitshift+0x64>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d909      	bls.n	8001f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	e007      	b.n	8001faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	aaaaaaab 	.word	0xaaaaaaab
 8001fc0:	08006a7c 	.word	0x08006a7c

08001fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0x5a>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d856      	bhi.n	8002092 <DMA_CheckFifoParam+0xce>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <DMA_CheckFifoParam+0x28>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800200f 	.word	0x0800200f
 8001ff4:	08001ffd 	.word	0x08001ffd
 8001ff8:	08002093 	.word	0x08002093
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d046      	beq.n	8002096 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200c:	e043      	b.n	8002096 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002016:	d140      	bne.n	800209a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201c:	e03d      	b.n	800209a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002026:	d121      	bne.n	800206c <DMA_CheckFifoParam+0xa8>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d837      	bhi.n	800209e <DMA_CheckFifoParam+0xda>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x70>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204b 	.word	0x0800204b
 800203c:	08002045 	.word	0x08002045
 8002040:	0800205d 	.word	0x0800205d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      break;
 8002048:	e030      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d025      	beq.n	80020a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205a:	e022      	b.n	80020a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002064:	d11f      	bne.n	80020a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206a:	e01c      	b.n	80020a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d903      	bls.n	800207a <DMA_CheckFifoParam+0xb6>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d003      	beq.n	8002080 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002078:	e018      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      break;
 800207e:	e015      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      break;
 8002090:	e00b      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002092:	bf00      	nop
 8002094:	e00a      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e008      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e006      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e004      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;   
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
    }
  } 
  
  return status; 
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d106      	bne.n	80020e4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f001 b913 	b.w	800330a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f001 b901 	b.w	800330a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002112:	2302      	movs	r3, #2
 8002114:	f001 b8f9 	b.w	800330a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	f041 80e7 	bne.w	80032fc <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800214a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 f910 	bl	8003380 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b99      	ldr	r3, [pc, #612]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002168:	429a      	cmp	r2, r3
 800216a:	d960      	bls.n	800222e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a97      	ldr	r2, [pc, #604]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d057      	beq.n	8002226 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d050      	beq.n	8002222 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d049      	beq.n	800221e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a93      	ldr	r2, [pc, #588]	; (80023dc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d042      	beq.n	800221a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a91      	ldr	r2, [pc, #580]	; (80023e0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d03a      	beq.n	8002214 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a90      	ldr	r2, [pc, #576]	; (80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d032      	beq.n	800220e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a8e      	ldr	r2, [pc, #568]	; (80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02a      	beq.n	8002208 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a8d      	ldr	r2, [pc, #564]	; (80023ec <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a8b      	ldr	r2, [pc, #556]	; (80023f0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01a      	beq.n	80021fc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8a      	ldr	r2, [pc, #552]	; (80023f4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d012      	beq.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a88      	ldr	r2, [pc, #544]	; (80023f8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00a      	beq.n	80021f0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80021e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e8:	e01e      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80021ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021ee:	e01b      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80021f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021f4:	e018      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80021f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021fa:	e015      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80021fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002200:	e012      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002206:	e00f      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220c:	e00c      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800220e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002212:	e009      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002214:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002218:	e006      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800221e:	2320      	movs	r3, #32
 8002220:	e002      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002222:	2320      	movs	r3, #32
 8002224:	e000      	b.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002226:	2320      	movs	r3, #32
 8002228:	4a75      	ldr	r2, [pc, #468]	; (8002400 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800222a:	60d3      	str	r3, [r2, #12]
 800222c:	e150      	b.n	80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002236:	429a      	cmp	r2, r3
 8002238:	d960      	bls.n	80022fc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a64      	ldr	r2, [pc, #400]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d057      	beq.n	80022f4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a62      	ldr	r2, [pc, #392]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d050      	beq.n	80022f0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a61      	ldr	r2, [pc, #388]	; (80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d049      	beq.n	80022ec <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5f      	ldr	r2, [pc, #380]	; (80023dc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d042      	beq.n	80022e8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03a      	beq.n	80022e2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d032      	beq.n	80022dc <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d02a      	beq.n	80022d6 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d022      	beq.n	80022d0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d01a      	beq.n	80022ca <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d012      	beq.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00a      	beq.n	80022be <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a53      	ldr	r2, [pc, #332]	; (80023fc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d102      	bne.n	80022b8 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80022b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022b6:	e01e      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022bc:	e01b      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c2:	e018      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c8:	e015      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022ce:	e012      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d4:	e00f      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022da:	e00c      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e0:	e009      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e6:	e006      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022e8:	2320      	movs	r3, #32
 80022ea:	e004      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022ec:	2320      	movs	r3, #32
 80022ee:	e002      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022f0:	2320      	movs	r3, #32
 80022f2:	e000      	b.n	80022f6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80022f4:	2320      	movs	r3, #32
 80022f6:	4a42      	ldr	r2, [pc, #264]	; (8002400 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80022f8:	6093      	str	r3, [r2, #8]
 80022fa:	e0e9      	b.n	80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002304:	429a      	cmp	r2, r3
 8002306:	f240 8083 	bls.w	8002410 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d057      	beq.n	80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d050      	beq.n	80023c0 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d049      	beq.n	80023bc <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d042      	beq.n	80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03a      	beq.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d032      	beq.n	80023ac <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d02a      	beq.n	80023a6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d022      	beq.n	80023a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d01a      	beq.n	800239a <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d012      	beq.n	8002394 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00a      	beq.n	800238e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d102      	bne.n	8002388 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002382:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002386:	e01e      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002388:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800238c:	e01b      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800238e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002392:	e018      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002398:	e015      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800239a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800239e:	e012      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a4:	e00f      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023aa:	e00c      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b0:	e009      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b6:	e006      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023b8:	2320      	movs	r3, #32
 80023ba:	e004      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023bc:	2320      	movs	r3, #32
 80023be:	e002      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023c0:	2320      	movs	r3, #32
 80023c2:	e000      	b.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80023c4:	2320      	movs	r3, #32
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e081      	b.n	80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80023cc:	40026458 	.word	0x40026458
 80023d0:	40026010 	.word	0x40026010
 80023d4:	40026410 	.word	0x40026410
 80023d8:	40026070 	.word	0x40026070
 80023dc:	40026470 	.word	0x40026470
 80023e0:	40026028 	.word	0x40026028
 80023e4:	40026428 	.word	0x40026428
 80023e8:	40026088 	.word	0x40026088
 80023ec:	40026488 	.word	0x40026488
 80023f0:	40026040 	.word	0x40026040
 80023f4:	40026440 	.word	0x40026440
 80023f8:	400260a0 	.word	0x400260a0
 80023fc:	400264a0 	.word	0x400264a0
 8002400:	40026400 	.word	0x40026400
 8002404:	400260b8 	.word	0x400260b8
 8002408:	40026058 	.word	0x40026058
 800240c:	40026000 	.word	0x40026000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a96      	ldr	r2, [pc, #600]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d057      	beq.n	80024ca <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a95      	ldr	r2, [pc, #596]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d050      	beq.n	80024c6 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a93      	ldr	r2, [pc, #588]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d049      	beq.n	80024c2 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a92      	ldr	r2, [pc, #584]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d042      	beq.n	80024be <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a90      	ldr	r2, [pc, #576]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03a      	beq.n	80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a8f      	ldr	r2, [pc, #572]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d032      	beq.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a8d      	ldr	r2, [pc, #564]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02a      	beq.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a8c      	ldr	r2, [pc, #560]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8a      	ldr	r2, [pc, #552]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01a      	beq.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a89      	ldr	r2, [pc, #548]	; (8002694 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d012      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00a      	beq.n	8002494 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a86      	ldr	r2, [pc, #536]	; (800269c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248c:	e01e      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800248e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002492:	e01b      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002494:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002498:	e018      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800249a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800249e:	e015      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024a4:	e012      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024aa:	e00f      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b0:	e00c      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b6:	e009      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024bc:	e006      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024be:	2320      	movs	r3, #32
 80024c0:	e004      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024c2:	2320      	movs	r3, #32
 80024c4:	e002      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024c6:	2320      	movs	r3, #32
 80024c8:	e000      	b.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80024ca:	2320      	movs	r3, #32
 80024cc:	4a74      	ldr	r2, [pc, #464]	; (80026a0 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80024ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80024d8:	429a      	cmp	r2, r3
 80024da:	d960      	bls.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d057      	beq.n	8002596 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a62      	ldr	r2, [pc, #392]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d050      	beq.n	8002592 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d049      	beq.n	800258e <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5f      	ldr	r2, [pc, #380]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d042      	beq.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d03a      	beq.n	8002584 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d032      	beq.n	800257e <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a5a      	ldr	r2, [pc, #360]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02a      	beq.n	8002578 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a59      	ldr	r2, [pc, #356]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01a      	beq.n	800256c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d012      	beq.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a53      	ldr	r2, [pc, #332]	; (800269c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d102      	bne.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002558:	e01e      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800255a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800255e:	e01b      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002564:	e018      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002566:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800256a:	e015      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800256c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002570:	e012      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002576:	e00f      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	e00c      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002582:	e009      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	e006      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800258a:	2310      	movs	r3, #16
 800258c:	e004      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800258e:	2310      	movs	r3, #16
 8002590:	e002      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002592:	2310      	movs	r3, #16
 8002594:	e000      	b.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002596:	2310      	movs	r3, #16
 8002598:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800259a:	60d3      	str	r3, [r2, #12]
 800259c:	e14f      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f240 8082 	bls.w	80026b0 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d057      	beq.n	8002666 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d050      	beq.n	8002662 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d049      	beq.n	800265e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d042      	beq.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d03a      	beq.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d032      	beq.n	800264e <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02a      	beq.n	8002648 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01a      	beq.n	800263c <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d012      	beq.n	8002636 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00a      	beq.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002628:	e01e      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800262a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800262e:	e01b      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002630:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002634:	e018      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800263a:	e015      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800263c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002640:	e012      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002646:	e00f      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264c:	e00c      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800264e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002652:	e009      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002658:	e006      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800265a:	2310      	movs	r3, #16
 800265c:	e004      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800265e:	2310      	movs	r3, #16
 8002660:	e002      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002662:	2310      	movs	r3, #16
 8002664:	e000      	b.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002666:	2310      	movs	r3, #16
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	e0e7      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800266e:	bf00      	nop
 8002670:	40026010 	.word	0x40026010
 8002674:	40026410 	.word	0x40026410
 8002678:	40026070 	.word	0x40026070
 800267c:	40026470 	.word	0x40026470
 8002680:	40026028 	.word	0x40026028
 8002684:	40026428 	.word	0x40026428
 8002688:	40026088 	.word	0x40026088
 800268c:	40026488 	.word	0x40026488
 8002690:	40026040 	.word	0x40026040
 8002694:	40026440 	.word	0x40026440
 8002698:	400260a0 	.word	0x400260a0
 800269c:	400264a0 	.word	0x400264a0
 80026a0:	40026000 	.word	0x40026000
 80026a4:	40026458 	.word	0x40026458
 80026a8:	40026400 	.word	0x40026400
 80026ac:	400260b8 	.word	0x400260b8
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b96      	ldr	r3, [pc, #600]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d960      	bls.n	800277e <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a94      	ldr	r2, [pc, #592]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d057      	beq.n	8002776 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d050      	beq.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a91      	ldr	r2, [pc, #580]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d049      	beq.n	800276e <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a90      	ldr	r2, [pc, #576]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d042      	beq.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a8e      	ldr	r2, [pc, #568]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d03a      	beq.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8d      	ldr	r2, [pc, #564]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d032      	beq.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a8b      	ldr	r2, [pc, #556]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02a      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8a      	ldr	r2, [pc, #552]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a88      	ldr	r2, [pc, #544]	; (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01a      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a87      	ldr	r2, [pc, #540]	; (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d012      	beq.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a85      	ldr	r2, [pc, #532]	; (800293c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00a      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a84      	ldr	r2, [pc, #528]	; (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d102      	bne.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002734:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002738:	e01e      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800273a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800273e:	e01b      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002744:	e018      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002746:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800274a:	e015      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800274c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002750:	e012      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002756:	e00f      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275c:	e00c      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800275e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002762:	e009      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002768:	e006      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800276a:	2310      	movs	r3, #16
 800276c:	e004      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800276e:	2310      	movs	r3, #16
 8002770:	e002      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002772:	2310      	movs	r3, #16
 8002774:	e000      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002776:	2310      	movs	r3, #16
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e05f      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a64      	ldr	r2, [pc, #400]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d057      	beq.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a62      	ldr	r2, [pc, #392]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d050      	beq.n	8002834 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a61      	ldr	r2, [pc, #388]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d049      	beq.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5f      	ldr	r2, [pc, #380]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d042      	beq.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03a      	beq.n	8002826 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d032      	beq.n	8002820 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02a      	beq.n	800281a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a59      	ldr	r2, [pc, #356]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01a      	beq.n	800280e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d012      	beq.n	8002808 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a55      	ldr	r2, [pc, #340]	; (800293c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00a      	beq.n	8002802 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a53      	ldr	r2, [pc, #332]	; (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d102      	bne.n	80027fc <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80027f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027fa:	e01e      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80027fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002800:	e01b      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002802:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002806:	e018      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800280c:	e015      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800280e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002812:	e012      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	e00f      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800281a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281e:	e00c      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002824:	e009      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282a:	e006      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800282c:	2310      	movs	r3, #16
 800282e:	e004      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002830:	2310      	movs	r3, #16
 8002832:	e002      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002834:	2310      	movs	r3, #16
 8002836:	e000      	b.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002838:	2310      	movs	r3, #16
 800283a:	4a42      	ldr	r2, [pc, #264]	; (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800283c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002846:	429a      	cmp	r2, r3
 8002848:	f240 8082 	bls.w	8002950 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a30      	ldr	r2, [pc, #192]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d057      	beq.n	8002906 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d050      	beq.n	8002902 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d049      	beq.n	80028fe <HAL_DMAEx_MultiBufferStart_IT+0x842>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d042      	beq.n	80028fa <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d03a      	beq.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d032      	beq.n	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02a      	beq.n	80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01a      	beq.n	80028dc <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d012      	beq.n	80028d6 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00a      	beq.n	80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d102      	bne.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80028c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028c8:	e01e      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	e01b      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028d4:	e018      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028da:	e015      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028e0:	e012      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e6:	e00f      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ec:	e00c      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f2:	e009      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	e006      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028fa:	2308      	movs	r3, #8
 80028fc:	e004      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80028fe:	2308      	movs	r3, #8
 8002900:	e002      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002902:	2308      	movs	r3, #8
 8002904:	e000      	b.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002906:	2308      	movs	r3, #8
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800290a:	60d3      	str	r3, [r2, #12]
 800290c:	e16f      	b.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800290e:	bf00      	nop
 8002910:	40026058 	.word	0x40026058
 8002914:	40026010 	.word	0x40026010
 8002918:	40026410 	.word	0x40026410
 800291c:	40026070 	.word	0x40026070
 8002920:	40026470 	.word	0x40026470
 8002924:	40026028 	.word	0x40026028
 8002928:	40026428 	.word	0x40026428
 800292c:	40026088 	.word	0x40026088
 8002930:	40026488 	.word	0x40026488
 8002934:	40026040 	.word	0x40026040
 8002938:	40026440 	.word	0x40026440
 800293c:	400260a0 	.word	0x400260a0
 8002940:	400264a0 	.word	0x400264a0
 8002944:	40026000 	.word	0x40026000
 8002948:	40026458 	.word	0x40026458
 800294c:	40026400 	.word	0x40026400
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002958:	429a      	cmp	r2, r3
 800295a:	d960      	bls.n	8002a1e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a92      	ldr	r2, [pc, #584]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d057      	beq.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a91      	ldr	r2, [pc, #580]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d050      	beq.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8f      	ldr	r2, [pc, #572]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d049      	beq.n	8002a0e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a8e      	ldr	r2, [pc, #568]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d042      	beq.n	8002a0a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a8c      	ldr	r2, [pc, #560]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d03a      	beq.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d032      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a89      	ldr	r2, [pc, #548]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02a      	beq.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a88      	ldr	r2, [pc, #544]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a86      	ldr	r2, [pc, #536]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01a      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a85      	ldr	r2, [pc, #532]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d012      	beq.n	80029e6 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00a      	beq.n	80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a82      	ldr	r2, [pc, #520]	; (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80029d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d8:	e01e      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029de:	e01b      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029e4:	e018      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ea:	e015      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029f0:	e012      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f6:	e00f      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	e00c      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80029fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a02:	e009      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	e006      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	e004      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e002      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002a12:	2308      	movs	r3, #8
 8002a14:	e000      	b.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002a16:	2308      	movs	r3, #8
 8002a18:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8002a1a:	6093      	str	r3, [r2, #8]
 8002a1c:	e0e7      	b.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d960      	bls.n	8002aec <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5f      	ldr	r2, [pc, #380]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d057      	beq.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d050      	beq.n	8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d049      	beq.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d042      	beq.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03a      	beq.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d032      	beq.n	8002acc <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02a      	beq.n	8002ac6 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a53      	ldr	r2, [pc, #332]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01a      	beq.n	8002aba <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00a      	beq.n	8002aae <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4e      	ldr	r2, [pc, #312]	; (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d102      	bne.n	8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002aa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aa6:	e01e      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aac:	e01b      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002aae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab2:	e018      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab8:	e015      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002aba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002abe:	e012      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	e00f      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aca:	e00c      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad0:	e009      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad6:	e006      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ad8:	2308      	movs	r3, #8
 8002ada:	e004      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002adc:	2308      	movs	r3, #8
 8002ade:	e002      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	e080      	b.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d078      	beq.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d050      	beq.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d049      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d042      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03a      	beq.n	8002b94 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d032      	beq.n	8002b8e <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02a      	beq.n	8002b88 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01a      	beq.n	8002b7c <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00a      	beq.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b68:	e03f      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6e:	e03c      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b74:	e039      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b7a:	e036      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b80:	e033      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b86:	e030      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8c:	e02d      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	e02a      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b98:	e027      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e025      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e023      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	e021      	b.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002ba6:	bf00      	nop
 8002ba8:	400260b8 	.word	0x400260b8
 8002bac:	40026010 	.word	0x40026010
 8002bb0:	40026410 	.word	0x40026410
 8002bb4:	40026070 	.word	0x40026070
 8002bb8:	40026470 	.word	0x40026470
 8002bbc:	40026028 	.word	0x40026028
 8002bc0:	40026428 	.word	0x40026428
 8002bc4:	40026088 	.word	0x40026088
 8002bc8:	40026488 	.word	0x40026488
 8002bcc:	40026040 	.word	0x40026040
 8002bd0:	40026440 	.word	0x40026440
 8002bd4:	400260a0 	.word	0x400260a0
 8002bd8:	400264a0 	.word	0x400264a0
 8002bdc:	40026400 	.word	0x40026400
 8002be0:	40026058 	.word	0x40026058
 8002be4:	40026000 	.word	0x40026000
 8002be8:	2308      	movs	r3, #8
 8002bea:	4a9a      	ldr	r2, [pc, #616]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002bec:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b98      	ldr	r3, [pc, #608]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d960      	bls.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a97      	ldr	r2, [pc, #604]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d057      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a95      	ldr	r2, [pc, #596]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d050      	beq.n	8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a94      	ldr	r2, [pc, #592]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d049      	beq.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a92      	ldr	r2, [pc, #584]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d042      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a91      	ldr	r2, [pc, #580]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d03a      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8f      	ldr	r2, [pc, #572]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d032      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a8e      	ldr	r2, [pc, #568]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d02a      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a8c      	ldr	r2, [pc, #560]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d022      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a8b      	ldr	r2, [pc, #556]	; (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d01a      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a89      	ldr	r2, [pc, #548]	; (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d012      	beq.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a88      	ldr	r2, [pc, #544]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00a      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a86      	ldr	r2, [pc, #536]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c76:	e01e      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c7c:	e01b      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c82:	e018      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c88:	e015      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c8e:	e012      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c94:	e00f      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9a:	e00c      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca0:	e009      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca6:	e006      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e004      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e002      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e000      	b.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	4a75      	ldr	r2, [pc, #468]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002cb8:	60d3      	str	r3, [r2, #12]
 8002cba:	e151      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d960      	bls.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a63      	ldr	r2, [pc, #396]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d057      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d050      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d049      	beq.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d042      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03a      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d032      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02a      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a59      	ldr	r2, [pc, #356]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a53      	ldr	r2, [pc, #332]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d44:	e01e      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4a:	e01b      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d50:	e018      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d56:	e015      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d5c:	e012      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d62:	e00f      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d68:	e00c      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	e009      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d74:	e006      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d76:	2304      	movs	r3, #4
 8002d78:	e004      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e002      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e000      	b.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002d82:	2304      	movs	r3, #4
 8002d84:	4a41      	ldr	r2, [pc, #260]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002d86:	6093      	str	r3, [r2, #8]
 8002d88:	e0ea      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002d92:	429a      	cmp	r2, r3
 8002d94:	f240 8084 	bls.w	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d07a      	beq.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d050      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d049      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2b      	ldr	r2, [pc, #172]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d042      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03a      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d032      	beq.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02a      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01a      	beq.n	8002e28 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00a      	beq.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e14:	e041      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1a:	e03e      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e20:	e03b      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e26:	e038      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e2c:	e035      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	e032      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	e02f      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e3e:	e02c      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e44:	e029      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e027      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e025      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e023      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002e52:	bf00      	nop
 8002e54:	40026000 	.word	0x40026000
 8002e58:	40026458 	.word	0x40026458
 8002e5c:	40026010 	.word	0x40026010
 8002e60:	40026410 	.word	0x40026410
 8002e64:	40026070 	.word	0x40026070
 8002e68:	40026470 	.word	0x40026470
 8002e6c:	40026028 	.word	0x40026028
 8002e70:	40026428 	.word	0x40026428
 8002e74:	40026088 	.word	0x40026088
 8002e78:	40026488 	.word	0x40026488
 8002e7c:	40026040 	.word	0x40026040
 8002e80:	40026440 	.word	0x40026440
 8002e84:	400260a0 	.word	0x400260a0
 8002e88:	400264a0 	.word	0x400264a0
 8002e8c:	40026400 	.word	0x40026400
 8002e90:	400260b8 	.word	0x400260b8
 8002e94:	40026058 	.word	0x40026058
 8002e98:	2304      	movs	r3, #4
 8002e9a:	4a94      	ldr	r2, [pc, #592]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e9c:	60d3      	str	r3, [r2, #12]
 8002e9e:	e05f      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a92      	ldr	r2, [pc, #584]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d057      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a91      	ldr	r2, [pc, #580]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d050      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8f      	ldr	r2, [pc, #572]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d049      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a8e      	ldr	r2, [pc, #568]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d042      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a8c      	ldr	r2, [pc, #560]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d03a      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8b      	ldr	r2, [pc, #556]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d032      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a89      	ldr	r2, [pc, #548]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02a      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a88      	ldr	r2, [pc, #544]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a86      	ldr	r2, [pc, #536]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01a      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a85      	ldr	r2, [pc, #532]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d012      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a83      	ldr	r2, [pc, #524]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00a      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a82      	ldr	r2, [pc, #520]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d102      	bne.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f1c:	e01e      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f22:	e01b      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f28:	e018      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f2e:	e015      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f34:	e012      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	e00f      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f40:	e00c      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f46:	e009      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4c:	e006      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e004      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e002      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e000      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	4a63      	ldr	r2, [pc, #396]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002f5e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d95c      	bls.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5f      	ldr	r2, [pc, #380]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d053      	beq.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5e      	ldr	r2, [pc, #376]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04c      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5c      	ldr	r2, [pc, #368]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d045      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03e      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a59      	ldr	r2, [pc, #356]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d037      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d030      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d029      	beq.n	8003006 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a53      	ldr	r2, [pc, #332]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01a      	beq.n	8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d102      	bne.n	8002fea <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe8:	e01a      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fee:	e017      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff4:	e014      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffa:	e011      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	e00e      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003002:	2340      	movs	r3, #64	; 0x40
 8003004:	e00c      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003006:	2340      	movs	r3, #64	; 0x40
 8003008:	e00a      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800300a:	2340      	movs	r3, #64	; 0x40
 800300c:	e008      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800300e:	2340      	movs	r3, #64	; 0x40
 8003010:	e006      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003012:	2301      	movs	r3, #1
 8003014:	e004      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003016:	2301      	movs	r3, #1
 8003018:	e002      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800301e:	2301      	movs	r3, #1
 8003020:	4a40      	ldr	r2, [pc, #256]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003022:	60d3      	str	r3, [r2, #12]
 8003024:	e141      	b.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800302e:	429a      	cmp	r2, r3
 8003030:	d97c      	bls.n	800312c <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2e      	ldr	r2, [pc, #184]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d053      	beq.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04c      	beq.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d045      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a29      	ldr	r2, [pc, #164]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03e      	beq.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a28      	ldr	r2, [pc, #160]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d037      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d030      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a25      	ldr	r2, [pc, #148]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d029      	beq.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a23      	ldr	r2, [pc, #140]	; (800310c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01a      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a20      	ldr	r2, [pc, #128]	; (8003114 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	; (800311c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80030aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ae:	e01a      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030b4:	e017      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ba:	e014      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e011      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c6:	e00e      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	e00c      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	e00a      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030d0:	2340      	movs	r3, #64	; 0x40
 80030d2:	e008      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030d4:	2340      	movs	r3, #64	; 0x40
 80030d6:	e006      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030d8:	2301      	movs	r3, #1
 80030da:	e004      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030dc:	2301      	movs	r3, #1
 80030de:	e002      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	e0de      	b.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80030ec:	40026000 	.word	0x40026000
 80030f0:	40026010 	.word	0x40026010
 80030f4:	40026410 	.word	0x40026410
 80030f8:	40026070 	.word	0x40026070
 80030fc:	40026470 	.word	0x40026470
 8003100:	40026028 	.word	0x40026028
 8003104:	40026428 	.word	0x40026428
 8003108:	40026088 	.word	0x40026088
 800310c:	40026488 	.word	0x40026488
 8003110:	40026040 	.word	0x40026040
 8003114:	40026440 	.word	0x40026440
 8003118:	400260a0 	.word	0x400260a0
 800311c:	400264a0 	.word	0x400264a0
 8003120:	40026458 	.word	0x40026458
 8003124:	40026400 	.word	0x40026400
 8003128:	400260b8 	.word	0x400260b8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d95c      	bls.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a76      	ldr	r2, [pc, #472]	; (8003318 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d053      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04c      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a73      	ldr	r2, [pc, #460]	; (8003320 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03e      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a70      	ldr	r2, [pc, #448]	; (8003328 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d037      	beq.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6f      	ldr	r2, [pc, #444]	; (800332c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d030      	beq.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6d      	ldr	r2, [pc, #436]	; (8003330 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d029      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6c      	ldr	r2, [pc, #432]	; (8003334 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6a      	ldr	r2, [pc, #424]	; (8003338 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01a      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a69      	ldr	r2, [pc, #420]	; (800333c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d012      	beq.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a67      	ldr	r2, [pc, #412]	; (8003340 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00a      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a66      	ldr	r2, [pc, #408]	; (8003344 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d102      	bne.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80031b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b4:	e01a      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ba:	e017      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c0:	e014      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c6:	e011      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031cc:	e00e      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	e00c      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	e00a      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	e008      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031da:	2340      	movs	r3, #64	; 0x40
 80031dc:	e006      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031de:	2301      	movs	r3, #1
 80031e0:	e004      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e002      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4a56      	ldr	r2, [pc, #344]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e05b      	b.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a48      	ldr	r2, [pc, #288]	; (8003318 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d053      	beq.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04c      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a45      	ldr	r2, [pc, #276]	; (8003320 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d045      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a43      	ldr	r2, [pc, #268]	; (8003324 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03e      	beq.n	8003298 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d037      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d030      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d029      	beq.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01a      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3a      	ldr	r2, [pc, #232]	; (800333c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d012      	beq.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a39      	ldr	r2, [pc, #228]	; (8003340 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00a      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d102      	bne.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800326a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326e:	e01a      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003274:	e017      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327a:	e014      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800327c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003280:	e011      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003286:	e00e      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	e00c      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800328c:	2340      	movs	r3, #64	; 0x40
 800328e:	e00a      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003290:	2340      	movs	r3, #64	; 0x40
 8003292:	e008      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003294:	2340      	movs	r3, #64	; 0x40
 8003296:	e006      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003298:	2301      	movs	r3, #1
 800329a:	e004      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800329c:	2301      	movs	r3, #1
 800329e:	e002      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80032a8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0216 	orr.w	r2, r2, #22
 80032b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0208 	orr.w	r2, r2, #8
 80032e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e005      	b.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003308:	7dfb      	ldrb	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40026058 	.word	0x40026058
 8003318:	40026010 	.word	0x40026010
 800331c:	40026410 	.word	0x40026410
 8003320:	40026070 	.word	0x40026070
 8003324:	40026470 	.word	0x40026470
 8003328:	40026028 	.word	0x40026028
 800332c:	40026428 	.word	0x40026428
 8003330:	40026088 	.word	0x40026088
 8003334:	40026488 	.word	0x40026488
 8003338:	40026040 	.word	0x40026040
 800333c:	40026440 	.word	0x40026440
 8003340:	400260a0 	.word	0x400260a0
 8003344:	400264a0 	.word	0x400264a0
 8003348:	40026000 	.word	0x40026000

0800334c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e003      	b.n	8003372 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d108      	bne.n	80033b0 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ae:	e007      	b.n	80033c0 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e177      	b.n	80036d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	f040 8166 	bne.w	80036d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d005      	beq.n	800341e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	2b02      	cmp	r3, #2
 800341c:	d130      	bne.n	8003480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d017      	beq.n	80034bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d123      	bne.n	8003510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80c0 	beq.w	80036d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_GPIO_Init+0x324>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356e:	4a61      	ldr	r2, [pc, #388]	; (80036f4 <HAL_GPIO_Init+0x328>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_GPIO_Init+0x32c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d037      	beq.n	800360a <HAL_GPIO_Init+0x23e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a57      	ldr	r2, [pc, #348]	; (80036fc <HAL_GPIO_Init+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d031      	beq.n	8003606 <HAL_GPIO_Init+0x23a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a56      	ldr	r2, [pc, #344]	; (8003700 <HAL_GPIO_Init+0x334>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02b      	beq.n	8003602 <HAL_GPIO_Init+0x236>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a55      	ldr	r2, [pc, #340]	; (8003704 <HAL_GPIO_Init+0x338>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d025      	beq.n	80035fe <HAL_GPIO_Init+0x232>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_GPIO_Init+0x33c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <HAL_GPIO_Init+0x22e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_GPIO_Init+0x340>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d019      	beq.n	80035f6 <HAL_GPIO_Init+0x22a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_GPIO_Init+0x344>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x226>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a51      	ldr	r2, [pc, #324]	; (8003714 <HAL_GPIO_Init+0x348>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_GPIO_Init+0x222>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a50      	ldr	r2, [pc, #320]	; (8003718 <HAL_GPIO_Init+0x34c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <HAL_GPIO_Init+0x21e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_GPIO_Init+0x350>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_GPIO_Init+0x21a>
 80035e2:	2309      	movs	r3, #9
 80035e4:	e012      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035e6:	230a      	movs	r3, #10
 80035e8:	e010      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ea:	2308      	movs	r3, #8
 80035ec:	e00e      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ee:	2307      	movs	r3, #7
 80035f0:	e00c      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f2:	2306      	movs	r3, #6
 80035f4:	e00a      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e008      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fa:	2304      	movs	r3, #4
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fe:	2303      	movs	r3, #3
 8003600:	e004      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x240>
 800360a:	2300      	movs	r3, #0
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800361c:	4935      	ldr	r1, [pc, #212]	; (80036f4 <HAL_GPIO_Init+0x328>)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_GPIO_Init+0x354>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003678:	4a29      	ldr	r2, [pc, #164]	; (8003720 <HAL_GPIO_Init+0x354>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_GPIO_Init+0x354>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <HAL_GPIO_Init+0x354>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	f67f ae84 	bls.w	80033e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	40020800 	.word	0x40020800
 8003704:	40020c00 	.word	0x40020c00
 8003708:	40021000 	.word	0x40021000
 800370c:	40021400 	.word	0x40021400
 8003710:	40021800 	.word	0x40021800
 8003714:	40021c00 	.word	0x40021c00
 8003718:	40022000 	.word	0x40022000
 800371c:	40022400 	.word	0x40022400
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12b      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fb4e 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f001 fe44 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a81      	ldr	r2, [pc, #516]	; (80039cc <HAL_I2C_Init+0x274>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_I2C_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_I2C_Init+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0e7      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a78      	ldr	r2, [pc, #480]	; (80039d8 <HAL_I2C_Init+0x280>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_I2C_Init+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a69      	ldr	r2, [pc, #420]	; (80039dc <HAL_I2C_Init+0x284>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	495c      	ldr	r1, [pc, #368]	; (80039cc <HAL_I2C_Init+0x274>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d819      	bhi.n	8003894 <HAL_I2C_Init+0x13c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003874:	400b      	ands	r3, r1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_I2C_Init+0x138>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e59      	subs	r1, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fbb1 f3f3 	udiv	r3, r1, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	e051      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e04f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_I2C_Init+0x168>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Init+0x18e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x196>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_I2C_Init+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e58      	subs	r0, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	fbb0 f3f3 	udiv	r3, r0, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	000186a0 	.word	0x000186a0
 80039d0:	001e847f 	.word	0x001e847f
 80039d4:	003d08ff 	.word	0x003d08ff
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	460b      	mov	r3, r1
 80039ee:	817b      	strh	r3, [r7, #10]
 80039f0:	4613      	mov	r3, r2
 80039f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7fd fc20 	bl	8001238 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	f040 80e0 	bne.w	8003bc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2319      	movs	r3, #25
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4970      	ldr	r1, [pc, #448]	; (8003bd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fde8 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0d3      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_Master_Transmit+0x50>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0cc      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d007      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2221      	movs	r2, #33	; 0x21
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2210      	movs	r2, #16
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	893a      	ldrh	r2, [r7, #8]
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fbbc 	bl	800421c <I2C_MasterRequestWrite>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e08d      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ac4:	e066      	b.n	8003b94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6a39      	ldr	r1, [r7, #32]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fe62 	bl	8004794 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d107      	bne.n	8003aee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_I2C_Master_Transmit+0x188>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6a39      	ldr	r1, [r7, #32]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fe52 	bl	8004816 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d107      	bne.n	8003b90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e01a      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d194      	bne.n	8003ac6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e000      	b.n	8003bca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	00100002 	.word	0x00100002
 8003bd8:	ffff0000 	.word	0xffff0000

08003bdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7fd fb22 	bl	8001238 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 820b 	bne.w	800401a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2319      	movs	r3, #25
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	497c      	ldr	r1, [pc, #496]	; (8003e00 <HAL_I2C_Master_Receive+0x224>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fcea 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e1fe      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2C_Master_Receive+0x50>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e1f7      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d007      	beq.n	8003c52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2222      	movs	r2, #34	; 0x22
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	893a      	ldrh	r2, [r7, #8]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_I2C_Master_Receive+0x228>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c94:	8979      	ldrh	r1, [r7, #10]
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fb40 	bl	8004320 <I2C_MasterRequestRead>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e1b8      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d113      	bne.n	8003cda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e18c      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d11b      	bne.n	8003d1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e16c      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d11b      	bne.n	8003d5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	e14c      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d80:	e138      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	f200 80f1 	bhi.w	8003f6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d123      	bne.n	8003ddc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fd7d 	bl	8004898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e139      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dda:	e10b      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d14e      	bne.n	8003e82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	2200      	movs	r2, #0
 8003dec:	4906      	ldr	r1, [pc, #24]	; (8003e08 <HAL_I2C_Master_Receive+0x22c>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fbfa 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e10e      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
 8003dfe:	bf00      	nop
 8003e00:	00100002 	.word	0x00100002
 8003e04:	ffff0000 	.word	0xffff0000
 8003e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e80:	e0b8      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4966      	ldr	r1, [pc, #408]	; (8004024 <HAL_I2C_Master_Receive+0x448>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fbab 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0bf      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	494f      	ldr	r1, [pc, #316]	; (8004024 <HAL_I2C_Master_Receive+0x448>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fb7d 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e091      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f6c:	e042      	b.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fc90 	bl	8004898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e04c      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d118      	bne.n	8003ff4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f aec2 	bne.w	8003d82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3728      	adds	r7, #40	; 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	00010004 	.word	0x00010004

08004028 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7fd f8f9 	bl	8001238 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	f040 80d9 	bne.w	8004208 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2319      	movs	r3, #25
 800405c:	2201      	movs	r2, #1
 800405e:	496d      	ldr	r1, [pc, #436]	; (8004214 <HAL_I2C_Mem_Write+0x1ec>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fac1 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	e0cc      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Mem_Write+0x56>
 800407a:	2302      	movs	r3, #2
 800407c:	e0c5      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d007      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	; 0x21
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	; 0x40
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <HAL_I2C_Mem_Write+0x1f0>)
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e6:	88f8      	ldrh	r0, [r7, #6]
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9e0 	bl	80044bc <I2C_RequestMemoryWrite>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d052      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e081      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fb42 	bl	8004794 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06b      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d11b      	bne.n	80041a8 <HAL_I2C_Mem_Write+0x180>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1aa      	bne.n	8004106 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fb2e 	bl	8004816 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e016      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	00100002 	.word	0x00100002
 8004218:	ffff0000 	.word	0xffff0000

0800421c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	460b      	mov	r3, r1
 800422a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d006      	beq.n	8004246 <I2C_MasterRequestWrite+0x2a>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d003      	beq.n	8004246 <I2C_MasterRequestWrite+0x2a>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004244:	d108      	bne.n	8004258 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e00b      	b.n	8004270 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	2b12      	cmp	r3, #18
 800425e:	d107      	bne.n	8004270 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f9b3 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00d      	beq.n	80042a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004296:	d103      	bne.n	80042a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e035      	b.n	8004310 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ac:	d108      	bne.n	80042c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042bc:	611a      	str	r2, [r3, #16]
 80042be:	e01b      	b.n	80042f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042c0:	897b      	ldrh	r3, [r7, #10]
 80042c2:	11db      	asrs	r3, r3, #7
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f063 030f 	orn	r3, r3, #15
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	490e      	ldr	r1, [pc, #56]	; (8004318 <I2C_MasterRequestWrite+0xfc>)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f9d9 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e010      	b.n	8004310 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4907      	ldr	r1, [pc, #28]	; (800431c <I2C_MasterRequestWrite+0x100>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f9c9 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00010008 	.word	0x00010008
 800431c:	00010002 	.word	0x00010002

08004320 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	460b      	mov	r3, r1
 800432e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d006      	beq.n	800435a <I2C_MasterRequestRead+0x3a>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d003      	beq.n	800435a <I2C_MasterRequestRead+0x3a>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004358:	d108      	bne.n	800436c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e00b      	b.n	8004384 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	2b11      	cmp	r3, #17
 8004372:	d107      	bne.n	8004384 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f929 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d103      	bne.n	80043b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e079      	b.n	80044ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d108      	bne.n	80043d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	e05f      	b.n	8004494 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	11db      	asrs	r3, r3, #7
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0306 	and.w	r3, r3, #6
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f063 030f 	orn	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4930      	ldr	r1, [pc, #192]	; (80044b4 <I2C_MasterRequestRead+0x194>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f94f 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e054      	b.n	80044ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4929      	ldr	r1, [pc, #164]	; (80044b8 <I2C_MasterRequestRead+0x198>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f93f 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e044      	b.n	80044ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004446:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f8c7 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d103      	bne.n	8004478 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e017      	b.n	80044ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	11db      	asrs	r3, r3, #7
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0306 	and.w	r3, r3, #6
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f063 030e 	orn	r3, r3, #14
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <I2C_MasterRequestRead+0x198>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8fb 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00010008 	.word	0x00010008
 80044b8:	00010002 	.word	0x00010002

080044bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	817b      	strh	r3, [r7, #10]
 80044ce:	460b      	mov	r3, r1
 80044d0:	813b      	strh	r3, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f878 	bl	80045e8 <I2C_WaitOnFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450c:	d103      	bne.n	8004516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e05f      	b.n	80045da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	492d      	ldr	r1, [pc, #180]	; (80045e4 <I2C_RequestMemoryWrite+0x128>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f8b0 	bl	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04c      	b.n	80045da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f91a 	bl	8004794 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e02b      	b.n	80045da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004588:	893b      	ldrh	r3, [r7, #8]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]
 8004592:	e021      	b.n	80045d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	b29b      	uxth	r3, r3
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f8f4 	bl	8004794 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d107      	bne.n	80045ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e005      	b.n	80045da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	00010002 	.word	0x00010002

080045e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f8:	e025      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d021      	beq.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fc fe19 	bl	8001238 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e023      	b.n	800468e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10d      	bne.n	800466c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	43da      	mvns	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	e00c      	b.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d0b6      	beq.n	80045fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a4:	e051      	b.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d123      	bne.n	80046fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f043 0204 	orr.w	r2, r3, #4
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e046      	b.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d021      	beq.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fc fd97 	bl	8001238 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e020      	b.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10c      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e00b      	b.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	43da      	mvns	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4013      	ands	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d18d      	bne.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a0:	e02d      	b.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f8ce 	bl	8004944 <I2C_IsAcknowledgeFailed>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e02d      	b.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d021      	beq.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fc fd3d 	bl	8001238 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e007      	b.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b80      	cmp	r3, #128	; 0x80
 800480a:	d1ca      	bne.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004822:	e02d      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f88d 	bl	8004944 <I2C_IsAcknowledgeFailed>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e02d      	b.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d021      	beq.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fc fcfc 	bl	8001238 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e007      	b.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d1ca      	bne.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048a4:	e042      	b.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d119      	bne.n	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0210 	mvn.w	r2, #16
 80048bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e029      	b.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fc fca6 	bl	8001238 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d116      	bne.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e007      	b.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d1b5      	bne.n	80048a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d11b      	bne.n	8004994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0204 	orr.w	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d129      	bne.n	8004a0c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0210 	bic.w	r2, r2, #16
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d12a      	bne.n	8004a8a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a54:	89fb      	ldrh	r3, [r7, #14]
 8004a56:	f023 030f 	bic.w	r3, r3, #15
 8004a5a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	89fb      	ldrh	r3, [r7, #14]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	89fa      	ldrh	r2, [r7, #14]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x94>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac4:	f7fc fbb8 	bl	8001238 <HAL_GetTick>
 8004ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aca:	e009      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004acc:	f7fc fbb4 	bl	8001238 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e01f      	b.n	8004b20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d1ee      	bne.n	8004acc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af4:	f7fc fba0 	bl	8001238 <HAL_GetTick>
 8004af8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004afa:	e009      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004afc:	f7fc fb9c 	bl	8001238 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0a:	d901      	bls.n	8004b10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e007      	b.n	8004b20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1c:	d1ee      	bne.n	8004afc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	420e0040 	.word	0x420e0040
 8004b30:	40007000 	.word	0x40007000
 8004b34:	420e0044 	.word	0x420e0044

08004b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e264      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d075      	beq.n	8004c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b56:	4ba3      	ldr	r3, [pc, #652]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b62:	4ba0      	ldr	r3, [pc, #640]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d112      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6e:	4b9d      	ldr	r3, [pc, #628]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	4b99      	ldr	r3, [pc, #612]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05b      	beq.n	8004c40 <HAL_RCC_OscConfig+0x108>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d157      	bne.n	8004c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e23f      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d106      	bne.n	8004bac <HAL_RCC_OscConfig+0x74>
 8004b9e:	4b91      	ldr	r3, [pc, #580]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a90      	ldr	r2, [pc, #576]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e01d      	b.n	8004be8 <HAL_RCC_OscConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x98>
 8004bb6:	4b8b      	ldr	r3, [pc, #556]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a8a      	ldr	r2, [pc, #552]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a87      	ldr	r2, [pc, #540]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0xb0>
 8004bd0:	4b84      	ldr	r3, [pc, #528]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a83      	ldr	r2, [pc, #524]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fb22 	bl	8001238 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fc fb1e 	bl	8001238 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e204      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	4b76      	ldr	r3, [pc, #472]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xc0>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fc fb0e 	bl	8001238 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fc fb0a 	bl	8001238 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e1f0      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	4b6c      	ldr	r3, [pc, #432]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0xe8>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d063      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c4e:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5a:	4b62      	ldr	r3, [pc, #392]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d11c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x152>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1c4      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4952      	ldr	r1, [pc, #328]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	e03a      	b.n	8004d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca8:	4b4f      	ldr	r3, [pc, #316]	; (8004de8 <HAL_RCC_OscConfig+0x2b0>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fc fac3 	bl	8001238 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb6:	f7fc fabf 	bl	8001238 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e1a5      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	4b46      	ldr	r3, [pc, #280]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd4:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4940      	ldr	r1, [pc, #256]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	e015      	b.n	8004d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cea:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <HAL_RCC_OscConfig+0x2b0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc faa2 	bl	8001238 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fc fa9e 	bl	8001238 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e184      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d030      	beq.n	8004d84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2a:	4b30      	ldr	r3, [pc, #192]	; (8004dec <HAL_RCC_OscConfig+0x2b4>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fc fa82 	bl	8001238 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d38:	f7fc fa7e 	bl	8001238 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e164      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4a:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x200>
 8004d56:	e015      	b.n	8004d84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_OscConfig+0x2b4>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fc fa6b 	bl	8001238 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d66:	f7fc fa67 	bl	8001238 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e14d      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a0 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_OscConfig+0x2b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_RCC_OscConfig+0x2b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <HAL_RCC_OscConfig+0x2b8>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dda:	f7fc fa2d 	bl	8001238 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	e011      	b.n	8004e06 <HAL_RCC_OscConfig+0x2ce>
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	42470000 	.word	0x42470000
 8004dec:	42470e80 	.word	0x42470e80
 8004df0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fc fa20 	bl	8001238 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e106      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e06:	4b85      	ldr	r3, [pc, #532]	; (800501c <HAL_RCC_OscConfig+0x4e4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x2f0>
 8004e1a:	4b81      	ldr	r3, [pc, #516]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	4a80      	ldr	r2, [pc, #512]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70
 8004e26:	e01c      	b.n	8004e62 <HAL_RCC_OscConfig+0x32a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d10c      	bne.n	8004e4a <HAL_RCC_OscConfig+0x312>
 8004e30:	4b7b      	ldr	r3, [pc, #492]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	4a7a      	ldr	r2, [pc, #488]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e36:	f043 0304 	orr.w	r3, r3, #4
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3c:	4b78      	ldr	r3, [pc, #480]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a77      	ldr	r2, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
 8004e48:	e00b      	b.n	8004e62 <HAL_RCC_OscConfig+0x32a>
 8004e4a:	4b75      	ldr	r3, [pc, #468]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	4a74      	ldr	r2, [pc, #464]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	f023 0301 	bic.w	r3, r3, #1
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70
 8004e56:	4b72      	ldr	r3, [pc, #456]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4a71      	ldr	r2, [pc, #452]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	f023 0304 	bic.w	r3, r3, #4
 8004e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d015      	beq.n	8004e96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6a:	f7fc f9e5 	bl	8001238 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fc f9e1 	bl	8001238 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0c5      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e88:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ee      	beq.n	8004e72 <HAL_RCC_OscConfig+0x33a>
 8004e94:	e014      	b.n	8004ec0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e96:	f7fc f9cf 	bl	8001238 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fc f9cb 	bl	8001238 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0af      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb4:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ee      	bne.n	8004e9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d105      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec6:	4b56      	ldr	r3, [pc, #344]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a55      	ldr	r2, [pc, #340]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 809b 	beq.w	8005012 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004edc:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d05c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d141      	bne.n	8004f74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef0:	4b4c      	ldr	r3, [pc, #304]	; (8005024 <HAL_RCC_OscConfig+0x4ec>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fc f99f 	bl	8001238 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fc f99b 	bl	8001238 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e081      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f0      	bne.n	8004efe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	019b      	lsls	r3, r3, #6
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4937      	ldr	r1, [pc, #220]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f46:	4b37      	ldr	r3, [pc, #220]	; (8005024 <HAL_RCC_OscConfig+0x4ec>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fc f974 	bl	8001238 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fc f970 	bl	8001238 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e056      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b2e      	ldr	r3, [pc, #184]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x41c>
 8004f72:	e04e      	b.n	8005012 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_RCC_OscConfig+0x4ec>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fc f95d 	bl	8001238 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f82:	f7fc f959 	bl	8001238 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e03f      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCC_OscConfig+0x44a>
 8004fa0:	e037      	b.n	8005012 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e032      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_RCC_OscConfig+0x4e8>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d028      	beq.n	800500e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d121      	bne.n	800500e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d11a      	bne.n	800500e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fde:	4013      	ands	r3, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d111      	bne.n	800500e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40007000 	.word	0x40007000
 8005020:	40023800 	.word	0x40023800
 8005024:	42470060 	.word	0x42470060

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0cc      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800503c:	4b68      	ldr	r3, [pc, #416]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d90c      	bls.n	8005064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b8      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b59      	ldr	r3, [pc, #356]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005094:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a52      	ldr	r2, [pc, #328]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800509e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b50      	ldr	r3, [pc, #320]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	494d      	ldr	r1, [pc, #308]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d044      	beq.n	8005148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d119      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d003      	beq.n	80050e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e6:	4b3f      	ldr	r3, [pc, #252]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e06f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	4b3b      	ldr	r3, [pc, #236]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e067      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005106:	4b37      	ldr	r3, [pc, #220]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4934      	ldr	r1, [pc, #208]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005118:	f7fc f88e 	bl	8001238 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	e00a      	b.n	8005136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fc f88a 	bl	8001238 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e04f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	4b2b      	ldr	r3, [pc, #172]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 020c 	and.w	r2, r3, #12
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d1eb      	bne.n	8005120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005148:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d20c      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e032      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4916      	ldr	r1, [pc, #88]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490e      	ldr	r1, [pc, #56]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ae:	f000 f889 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490a      	ldr	r1, [pc, #40]	; (80051e8 <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb ffee 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023c00 	.word	0x40023c00
 80051e4:	40023800 	.word	0x40023800
 80051e8:	08006a64 	.word	0x08006a64
 80051ec:	20000004 	.word	0x20000004
 80051f0:	20000008 	.word	0x20000008

080051f4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	; 0x30
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d129      	bne.n	800525a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6313      	str	r3, [r2, #48]	; 0x30
 8005216:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	2302      	movs	r3, #2
 800522a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	4619      	mov	r1, r3
 800523e:	481f      	ldr	r0, [pc, #124]	; (80052bc <HAL_RCC_MCOConfig+0xc8>)
 8005240:	f7fe f8c4 	bl	80033cc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	430b      	orrs	r3, r1
 8005252:	4919      	ldr	r1, [pc, #100]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005258:	e029      	b.n	80052ae <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	6313      	str	r3, [r2, #48]	; 0x30
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005280:	2303      	movs	r3, #3
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800528c:	f107 031c 	add.w	r3, r7, #28
 8005290:	4619      	mov	r1, r3
 8005292:	480b      	ldr	r0, [pc, #44]	; (80052c0 <HAL_RCC_MCOConfig+0xcc>)
 8005294:	f7fe f89a 	bl	80033cc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	00d9      	lsls	r1, r3, #3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40020000 	.word	0x40020000
 80052c0:	40020800 	.word	0x40020800

080052c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ca:	2100      	movs	r1, #0
 80052cc:	6079      	str	r1, [r7, #4]
 80052ce:	2100      	movs	r1, #0
 80052d0:	60f9      	str	r1, [r7, #12]
 80052d2:	2100      	movs	r1, #0
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052d6:	2100      	movs	r1, #0
 80052d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052da:	4952      	ldr	r1, [pc, #328]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 80052dc:	6889      	ldr	r1, [r1, #8]
 80052de:	f001 010c 	and.w	r1, r1, #12
 80052e2:	2908      	cmp	r1, #8
 80052e4:	d00d      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x3e>
 80052e6:	2908      	cmp	r1, #8
 80052e8:	f200 8094 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x150>
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d002      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x32>
 80052f0:	2904      	cmp	r1, #4
 80052f2:	d003      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x38>
 80052f4:	e08e      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCC_GetSysClockFreq+0x164>)
 80052f8:	60bb      	str	r3, [r7, #8]
       break;
 80052fa:	e08e      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <HAL_RCC_GetSysClockFreq+0x168>)
 80052fe:	60bb      	str	r3, [r7, #8]
      break;
 8005300:	e08b      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005302:	4948      	ldr	r1, [pc, #288]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 8005304:	6849      	ldr	r1, [r1, #4]
 8005306:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800530a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530c:	4945      	ldr	r1, [pc, #276]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 800530e:	6849      	ldr	r1, [r1, #4]
 8005310:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005314:	2900      	cmp	r1, #0
 8005316:	d024      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005318:	4942      	ldr	r1, [pc, #264]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 800531a:	6849      	ldr	r1, [r1, #4]
 800531c:	0989      	lsrs	r1, r1, #6
 800531e:	4608      	mov	r0, r1
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005328:	f04f 0500 	mov.w	r5, #0
 800532c:	ea00 0204 	and.w	r2, r0, r4
 8005330:	ea01 0305 	and.w	r3, r1, r5
 8005334:	493d      	ldr	r1, [pc, #244]	; (800542c <HAL_RCC_GetSysClockFreq+0x168>)
 8005336:	fb01 f003 	mul.w	r0, r1, r3
 800533a:	2100      	movs	r1, #0
 800533c:	fb01 f102 	mul.w	r1, r1, r2
 8005340:	1844      	adds	r4, r0, r1
 8005342:	493a      	ldr	r1, [pc, #232]	; (800542c <HAL_RCC_GetSysClockFreq+0x168>)
 8005344:	fba2 0101 	umull	r0, r1, r2, r1
 8005348:	1863      	adds	r3, r4, r1
 800534a:	4619      	mov	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f7fa ff9c 	bl	8000290 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4613      	mov	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e04a      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	ea02 0400 	and.w	r4, r2, r0
 800537a:	ea03 0501 	and.w	r5, r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	014b      	lsls	r3, r1, #5
 800538c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005390:	0142      	lsls	r2, r0, #5
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	1b00      	subs	r0, r0, r4
 8005398:	eb61 0105 	sbc.w	r1, r1, r5
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	018b      	lsls	r3, r1, #6
 80053a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053aa:	0182      	lsls	r2, r0, #6
 80053ac:	1a12      	subs	r2, r2, r0
 80053ae:	eb63 0301 	sbc.w	r3, r3, r1
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	00d9      	lsls	r1, r3, #3
 80053bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053c0:	00d0      	lsls	r0, r2, #3
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	1912      	adds	r2, r2, r4
 80053c8:	eb45 0303 	adc.w	r3, r5, r3
 80053cc:	f04f 0000 	mov.w	r0, #0
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	0299      	lsls	r1, r3, #10
 80053d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053da:	0290      	lsls	r0, r2, #10
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	f7fa ff50 	bl	8000290 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	60bb      	str	r3, [r7, #8]
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <HAL_RCC_GetSysClockFreq+0x164>)
 8005416:	60bb      	str	r3, [r7, #8]
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	68bb      	ldr	r3, [r7, #8]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bdb0      	pop	{r4, r5, r7, pc}
 8005424:	40023800 	.word	0x40023800
 8005428:	00f42400 	.word	0x00f42400
 800542c:	018cba80 	.word	0x018cba80

08005430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_GetHCLKFreq+0x14>)
 8005436:	681b      	ldr	r3, [r3, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000004 	.word	0x20000004

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800544c:	f7ff fff0 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0a9b      	lsrs	r3, r3, #10
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4903      	ldr	r1, [pc, #12]	; (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40023800 	.word	0x40023800
 800546c:	08006a74 	.word	0x08006a74

08005470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005474:	f7ff ffdc 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0b5b      	lsrs	r3, r3, #13
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4903      	ldr	r1, [pc, #12]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40023800 	.word	0x40023800
 8005494:	08006a74 	.word	0x08006a74

08005498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e03f      	b.n	800552a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fb fcf6 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2224      	movs	r2, #36	; 0x24
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f929 	bl	8005734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b08a      	sub	sp, #40	; 0x28
 8005536:	af02      	add	r7, sp, #8
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b20      	cmp	r3, #32
 8005550:	d17c      	bne.n	800564c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_UART_Transmit+0x2c>
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e075      	b.n	800564e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit+0x3e>
 800556c:	2302      	movs	r3, #2
 800556e:	e06e      	b.n	800564e <HAL_UART_Transmit+0x11c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2221      	movs	r2, #33	; 0x21
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005586:	f7fb fe57 	bl	8001238 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	88fa      	ldrh	r2, [r7, #6]
 8005590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a0:	d108      	bne.n	80055b4 <HAL_UART_Transmit+0x82>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e003      	b.n	80055bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055c4:	e02a      	b.n	800561c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f840 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e036      	b.n	800564e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	3302      	adds	r3, #2
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e007      	b.n	800560e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3301      	adds	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1cf      	bne.n	80055c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	2140      	movs	r1, #64	; 0x40
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f810 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e000      	b.n	800564e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
  }
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b090      	sub	sp, #64	; 0x40
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	e050      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d04c      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
 8005676:	f7fb fddf 	bl	8001238 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005682:	429a      	cmp	r2, r3
 8005684:	d241      	bcs.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056a6:	637a      	str	r2, [r7, #52]	; 0x34
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056da:	623a      	str	r2, [r7, #32]
 80056dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69f9      	ldr	r1, [r7, #28]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d09f      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3740      	adds	r7, #64	; 0x40
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	b09f      	sub	sp, #124	; 0x7c
 800573a:	af00      	add	r7, sp, #0
 800573c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	68d9      	ldr	r1, [r3, #12]
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	ea40 0301 	orr.w	r3, r0, r1
 8005754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	431a      	orrs	r2, r3
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	4313      	orrs	r3, r2
 800576c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005778:	f021 010c 	bic.w	r1, r1, #12
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005782:	430b      	orrs	r3, r1
 8005784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	6999      	ldr	r1, [r3, #24]
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	ea40 0301 	orr.w	r3, r0, r1
 800579c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4bc5      	ldr	r3, [pc, #788]	; (8005ab8 <UART_SetConfig+0x384>)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d004      	beq.n	80057b2 <UART_SetConfig+0x7e>
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4bc3      	ldr	r3, [pc, #780]	; (8005abc <UART_SetConfig+0x388>)
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d103      	bne.n	80057ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b2:	f7ff fe5d 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 80057b6:	6778      	str	r0, [r7, #116]	; 0x74
 80057b8:	e002      	b.n	80057c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ba:	f7ff fe45 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 80057be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c8:	f040 80b6 	bne.w	8005938 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ce:	461c      	mov	r4, r3
 80057d0:	f04f 0500 	mov.w	r5, #0
 80057d4:	4622      	mov	r2, r4
 80057d6:	462b      	mov	r3, r5
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	6439      	str	r1, [r7, #64]	; 0x40
 80057dc:	415b      	adcs	r3, r3
 80057de:	647b      	str	r3, [r7, #68]	; 0x44
 80057e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057e4:	1912      	adds	r2, r2, r4
 80057e6:	eb45 0303 	adc.w	r3, r5, r3
 80057ea:	f04f 0000 	mov.w	r0, #0
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	00d9      	lsls	r1, r3, #3
 80057f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057f8:	00d0      	lsls	r0, r2, #3
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	1911      	adds	r1, r2, r4
 8005800:	6639      	str	r1, [r7, #96]	; 0x60
 8005802:	416b      	adcs	r3, r5
 8005804:	667b      	str	r3, [r7, #100]	; 0x64
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	461a      	mov	r2, r3
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	1891      	adds	r1, r2, r2
 8005812:	63b9      	str	r1, [r7, #56]	; 0x38
 8005814:	415b      	adcs	r3, r3
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800581c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005820:	f7fa fd36 	bl	8000290 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4ba5      	ldr	r3, [pc, #660]	; (8005ac0 <UART_SetConfig+0x38c>)
 800582a:	fba3 2302 	umull	r2, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	011e      	lsls	r6, r3, #4
 8005832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005834:	461c      	mov	r4, r3
 8005836:	f04f 0500 	mov.w	r5, #0
 800583a:	4622      	mov	r2, r4
 800583c:	462b      	mov	r3, r5
 800583e:	1891      	adds	r1, r2, r2
 8005840:	6339      	str	r1, [r7, #48]	; 0x30
 8005842:	415b      	adcs	r3, r3
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800584a:	1912      	adds	r2, r2, r4
 800584c:	eb45 0303 	adc.w	r3, r5, r3
 8005850:	f04f 0000 	mov.w	r0, #0
 8005854:	f04f 0100 	mov.w	r1, #0
 8005858:	00d9      	lsls	r1, r3, #3
 800585a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800585e:	00d0      	lsls	r0, r2, #3
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	1911      	adds	r1, r2, r4
 8005866:	65b9      	str	r1, [r7, #88]	; 0x58
 8005868:	416b      	adcs	r3, r5
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	461a      	mov	r2, r3
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	1891      	adds	r1, r2, r2
 8005878:	62b9      	str	r1, [r7, #40]	; 0x28
 800587a:	415b      	adcs	r3, r3
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005882:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005886:	f7fa fd03 	bl	8000290 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4b8c      	ldr	r3, [pc, #560]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005890:	fba3 1302 	umull	r1, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	2164      	movs	r1, #100	; 0x64
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3332      	adds	r3, #50	; 0x32
 80058a2:	4a87      	ldr	r2, [pc, #540]	; (8005ac0 <UART_SetConfig+0x38c>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b0:	441e      	add	r6, r3
 80058b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b4:	4618      	mov	r0, r3
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	1894      	adds	r4, r2, r2
 80058c0:	623c      	str	r4, [r7, #32]
 80058c2:	415b      	adcs	r3, r3
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
 80058c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ca:	1812      	adds	r2, r2, r0
 80058cc:	eb41 0303 	adc.w	r3, r1, r3
 80058d0:	f04f 0400 	mov.w	r4, #0
 80058d4:	f04f 0500 	mov.w	r5, #0
 80058d8:	00dd      	lsls	r5, r3, #3
 80058da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058de:	00d4      	lsls	r4, r2, #3
 80058e0:	4622      	mov	r2, r4
 80058e2:	462b      	mov	r3, r5
 80058e4:	1814      	adds	r4, r2, r0
 80058e6:	653c      	str	r4, [r7, #80]	; 0x50
 80058e8:	414b      	adcs	r3, r1
 80058ea:	657b      	str	r3, [r7, #84]	; 0x54
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	61b9      	str	r1, [r7, #24]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005902:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005906:	f7fa fcc3 	bl	8000290 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3332      	adds	r3, #50	; 0x32
 8005922:	4a67      	ldr	r2, [pc, #412]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 0207 	and.w	r2, r3, #7
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4432      	add	r2, r6
 8005934:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005936:	e0b9      	b.n	8005aac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593a:	461c      	mov	r4, r3
 800593c:	f04f 0500 	mov.w	r5, #0
 8005940:	4622      	mov	r2, r4
 8005942:	462b      	mov	r3, r5
 8005944:	1891      	adds	r1, r2, r2
 8005946:	6139      	str	r1, [r7, #16]
 8005948:	415b      	adcs	r3, r3
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005950:	1912      	adds	r2, r2, r4
 8005952:	eb45 0303 	adc.w	r3, r5, r3
 8005956:	f04f 0000 	mov.w	r0, #0
 800595a:	f04f 0100 	mov.w	r1, #0
 800595e:	00d9      	lsls	r1, r3, #3
 8005960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005964:	00d0      	lsls	r0, r2, #3
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	eb12 0804 	adds.w	r8, r2, r4
 800596e:	eb43 0905 	adc.w	r9, r3, r5
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4618      	mov	r0, r3
 8005978:	f04f 0100 	mov.w	r1, #0
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	008b      	lsls	r3, r1, #2
 8005986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800598a:	0082      	lsls	r2, r0, #2
 800598c:	4640      	mov	r0, r8
 800598e:	4649      	mov	r1, r9
 8005990:	f7fa fc7e 	bl	8000290 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <UART_SetConfig+0x38c>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011e      	lsls	r6, r3, #4
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	4618      	mov	r0, r3
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	1894      	adds	r4, r2, r2
 80059b0:	60bc      	str	r4, [r7, #8]
 80059b2:	415b      	adcs	r3, r3
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ba:	1812      	adds	r2, r2, r0
 80059bc:	eb41 0303 	adc.w	r3, r1, r3
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	f04f 0500 	mov.w	r5, #0
 80059c8:	00dd      	lsls	r5, r3, #3
 80059ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ce:	00d4      	lsls	r4, r2, #3
 80059d0:	4622      	mov	r2, r4
 80059d2:	462b      	mov	r3, r5
 80059d4:	1814      	adds	r4, r2, r0
 80059d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80059d8:	414b      	adcs	r3, r1
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	008b      	lsls	r3, r1, #2
 80059f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059f4:	0082      	lsls	r2, r0, #2
 80059f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059fa:	f7fa fc49 	bl	8000290 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	; 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	3332      	adds	r3, #50	; 0x32
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	441e      	add	r6, r3
 8005a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a26:	4618      	mov	r0, r3
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	1894      	adds	r4, r2, r2
 8005a32:	603c      	str	r4, [r7, #0]
 8005a34:	415b      	adcs	r3, r3
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3c:	1812      	adds	r2, r2, r0
 8005a3e:	eb41 0303 	adc.w	r3, r1, r3
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	f04f 0500 	mov.w	r5, #0
 8005a4a:	00dd      	lsls	r5, r3, #3
 8005a4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a50:	00d4      	lsls	r4, r2, #3
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	eb12 0a00 	adds.w	sl, r2, r0
 8005a5a:	eb43 0b01 	adc.w	fp, r3, r1
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a76:	0082      	lsls	r2, r0, #2
 8005a78:	4650      	mov	r0, sl
 8005a7a:	4659      	mov	r1, fp
 8005a7c:	f7fa fc08 	bl	8000290 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005a86:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2164      	movs	r1, #100	; 0x64
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	3332      	adds	r3, #50	; 0x32
 8005a98:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <UART_SetConfig+0x38c>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4432      	add	r2, r6
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	377c      	adds	r7, #124	; 0x7c
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40011000 	.word	0x40011000
 8005abc:	40011400 	.word	0x40011400
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	; (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000010 	.word	0x20000010

08005ad0 <__sflush_r>:
 8005ad0:	898a      	ldrh	r2, [r1, #12]
 8005ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	0710      	lsls	r0, r2, #28
 8005ada:	460c      	mov	r4, r1
 8005adc:	d458      	bmi.n	8005b90 <__sflush_r+0xc0>
 8005ade:	684b      	ldr	r3, [r1, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc05      	bgt.n	8005af0 <__sflush_r+0x20>
 8005ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dc02      	bgt.n	8005af0 <__sflush_r+0x20>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	d0f9      	beq.n	8005aea <__sflush_r+0x1a>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005afc:	682f      	ldr	r7, [r5, #0]
 8005afe:	602b      	str	r3, [r5, #0]
 8005b00:	d032      	beq.n	8005b68 <__sflush_r+0x98>
 8005b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	075a      	lsls	r2, r3, #29
 8005b08:	d505      	bpl.n	8005b16 <__sflush_r+0x46>
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	1ac0      	subs	r0, r0, r3
 8005b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b10:	b10b      	cbz	r3, 8005b16 <__sflush_r+0x46>
 8005b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b14:	1ac0      	subs	r0, r0, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	d106      	bne.n	8005b36 <__sflush_r+0x66>
 8005b28:	6829      	ldr	r1, [r5, #0]
 8005b2a:	291d      	cmp	r1, #29
 8005b2c:	d82c      	bhi.n	8005b88 <__sflush_r+0xb8>
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <__sflush_r+0x108>)
 8005b30:	40ca      	lsrs	r2, r1
 8005b32:	07d6      	lsls	r6, r2, #31
 8005b34:	d528      	bpl.n	8005b88 <__sflush_r+0xb8>
 8005b36:	2200      	movs	r2, #0
 8005b38:	6062      	str	r2, [r4, #4]
 8005b3a:	04d9      	lsls	r1, r3, #19
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	d504      	bpl.n	8005b4c <__sflush_r+0x7c>
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	d101      	bne.n	8005b4a <__sflush_r+0x7a>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b903      	cbnz	r3, 8005b4c <__sflush_r+0x7c>
 8005b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b4e:	602f      	str	r7, [r5, #0]
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d0ca      	beq.n	8005aea <__sflush_r+0x1a>
 8005b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d002      	beq.n	8005b62 <__sflush_r+0x92>
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 f99f 	bl	8005ea0 <_free_r>
 8005b62:	2000      	movs	r0, #0
 8005b64:	6360      	str	r0, [r4, #52]	; 0x34
 8005b66:	e7c1      	b.n	8005aec <__sflush_r+0x1c>
 8005b68:	6a21      	ldr	r1, [r4, #32]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b0      	blx	r6
 8005b70:	1c41      	adds	r1, r0, #1
 8005b72:	d1c7      	bne.n	8005b04 <__sflush_r+0x34>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0c4      	beq.n	8005b04 <__sflush_r+0x34>
 8005b7a:	2b1d      	cmp	r3, #29
 8005b7c:	d001      	beq.n	8005b82 <__sflush_r+0xb2>
 8005b7e:	2b16      	cmp	r3, #22
 8005b80:	d101      	bne.n	8005b86 <__sflush_r+0xb6>
 8005b82:	602f      	str	r7, [r5, #0]
 8005b84:	e7b1      	b.n	8005aea <__sflush_r+0x1a>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	e7ad      	b.n	8005aec <__sflush_r+0x1c>
 8005b90:	690f      	ldr	r7, [r1, #16]
 8005b92:	2f00      	cmp	r7, #0
 8005b94:	d0a9      	beq.n	8005aea <__sflush_r+0x1a>
 8005b96:	0793      	lsls	r3, r2, #30
 8005b98:	680e      	ldr	r6, [r1, #0]
 8005b9a:	bf08      	it	eq
 8005b9c:	694b      	ldreq	r3, [r1, #20]
 8005b9e:	600f      	str	r7, [r1, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	eba6 0807 	sub.w	r8, r6, r7
 8005ba8:	608b      	str	r3, [r1, #8]
 8005baa:	f1b8 0f00 	cmp.w	r8, #0
 8005bae:	dd9c      	ble.n	8005aea <__sflush_r+0x1a>
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	463a      	mov	r2, r7
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b0      	blx	r6
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	dc06      	bgt.n	8005bce <__sflush_r+0xfe>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	e78e      	b.n	8005aec <__sflush_r+0x1c>
 8005bce:	4407      	add	r7, r0
 8005bd0:	eba8 0800 	sub.w	r8, r8, r0
 8005bd4:	e7e9      	b.n	8005baa <__sflush_r+0xda>
 8005bd6:	bf00      	nop
 8005bd8:	20400001 	.word	0x20400001

08005bdc <_fflush_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	4605      	mov	r5, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	b913      	cbnz	r3, 8005bec <_fflush_r+0x10>
 8005be6:	2500      	movs	r5, #0
 8005be8:	4628      	mov	r0, r5
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	b118      	cbz	r0, 8005bf6 <_fflush_r+0x1a>
 8005bee:	6983      	ldr	r3, [r0, #24]
 8005bf0:	b90b      	cbnz	r3, 8005bf6 <_fflush_r+0x1a>
 8005bf2:	f000 f887 	bl	8005d04 <__sinit>
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <_fflush_r+0x6c>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	d11b      	bne.n	8005c34 <_fflush_r+0x58>
 8005bfc:	686c      	ldr	r4, [r5, #4]
 8005bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <_fflush_r+0xa>
 8005c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c08:	07d0      	lsls	r0, r2, #31
 8005c0a:	d404      	bmi.n	8005c16 <_fflush_r+0x3a>
 8005c0c:	0599      	lsls	r1, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_fflush_r+0x3a>
 8005c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c12:	f000 f93a 	bl	8005e8a <__retarget_lock_acquire_recursive>
 8005c16:	4628      	mov	r0, r5
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f7ff ff59 	bl	8005ad0 <__sflush_r>
 8005c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c20:	07da      	lsls	r2, r3, #31
 8005c22:	4605      	mov	r5, r0
 8005c24:	d4e0      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	059b      	lsls	r3, r3, #22
 8005c2a:	d4dd      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2e:	f000 f92d 	bl	8005e8c <__retarget_lock_release_recursive>
 8005c32:	e7d9      	b.n	8005be8 <_fflush_r+0xc>
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <_fflush_r+0x70>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_fflush_r+0x62>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7df      	b.n	8005bfe <_fflush_r+0x22>
 8005c3e:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <_fflush_r+0x74>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7da      	b.n	8005bfe <_fflush_r+0x22>
 8005c48:	08006aa4 	.word	0x08006aa4
 8005c4c:	08006ac4 	.word	0x08006ac4
 8005c50:	08006a84 	.word	0x08006a84

08005c54 <std>:
 8005c54:	2300      	movs	r3, #0
 8005c56:	b510      	push	{r4, lr}
 8005c58:	4604      	mov	r4, r0
 8005c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c62:	6083      	str	r3, [r0, #8]
 8005c64:	8181      	strh	r1, [r0, #12]
 8005c66:	6643      	str	r3, [r0, #100]	; 0x64
 8005c68:	81c2      	strh	r2, [r0, #14]
 8005c6a:	6183      	str	r3, [r0, #24]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	2208      	movs	r2, #8
 8005c70:	305c      	adds	r0, #92	; 0x5c
 8005c72:	f000 f90c 	bl	8005e8e <memset>
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <std+0x38>)
 8005c78:	6263      	str	r3, [r4, #36]	; 0x24
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <std+0x3c>)
 8005c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <std+0x40>)
 8005c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <std+0x44>)
 8005c84:	6224      	str	r4, [r4, #32]
 8005c86:	6323      	str	r3, [r4, #48]	; 0x30
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08006621 	.word	0x08006621
 8005c90:	08006643 	.word	0x08006643
 8005c94:	0800667b 	.word	0x0800667b
 8005c98:	0800669f 	.word	0x0800669f

08005c9c <_cleanup_r>:
 8005c9c:	4901      	ldr	r1, [pc, #4]	; (8005ca4 <_cleanup_r+0x8>)
 8005c9e:	f000 b8af 	b.w	8005e00 <_fwalk_reent>
 8005ca2:	bf00      	nop
 8005ca4:	08005bdd 	.word	0x08005bdd

08005ca8 <__sfmoreglue>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	1e4a      	subs	r2, r1, #1
 8005cac:	2568      	movs	r5, #104	; 0x68
 8005cae:	4355      	muls	r5, r2
 8005cb0:	460e      	mov	r6, r1
 8005cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cb6:	f000 f943 	bl	8005f40 <_malloc_r>
 8005cba:	4604      	mov	r4, r0
 8005cbc:	b140      	cbz	r0, 8005cd0 <__sfmoreglue+0x28>
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cc4:	300c      	adds	r0, #12
 8005cc6:	60a0      	str	r0, [r4, #8]
 8005cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ccc:	f000 f8df 	bl	8005e8e <memset>
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}

08005cd4 <__sfp_lock_acquire>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__sfp_lock_acquire+0x8>)
 8005cd6:	f000 b8d8 	b.w	8005e8a <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	200259f0 	.word	0x200259f0

08005ce0 <__sfp_lock_release>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sfp_lock_release+0x8>)
 8005ce2:	f000 b8d3 	b.w	8005e8c <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	200259f0 	.word	0x200259f0

08005cec <__sinit_lock_acquire>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__sinit_lock_acquire+0x8>)
 8005cee:	f000 b8cc 	b.w	8005e8a <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	200259eb 	.word	0x200259eb

08005cf8 <__sinit_lock_release>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__sinit_lock_release+0x8>)
 8005cfa:	f000 b8c7 	b.w	8005e8c <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200259eb 	.word	0x200259eb

08005d04 <__sinit>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4604      	mov	r4, r0
 8005d08:	f7ff fff0 	bl	8005cec <__sinit_lock_acquire>
 8005d0c:	69a3      	ldr	r3, [r4, #24]
 8005d0e:	b11b      	cbz	r3, 8005d18 <__sinit+0x14>
 8005d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d14:	f7ff bff0 	b.w	8005cf8 <__sinit_lock_release>
 8005d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <__sinit+0x68>)
 8005d20:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <__sinit+0x6c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	bf04      	itt	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	61a3      	streq	r3, [r4, #24]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f820 	bl	8005d74 <__sfp>
 8005d34:	6060      	str	r0, [r4, #4]
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 f81c 	bl	8005d74 <__sfp>
 8005d3c:	60a0      	str	r0, [r4, #8]
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f818 	bl	8005d74 <__sfp>
 8005d44:	2200      	movs	r2, #0
 8005d46:	60e0      	str	r0, [r4, #12]
 8005d48:	2104      	movs	r1, #4
 8005d4a:	6860      	ldr	r0, [r4, #4]
 8005d4c:	f7ff ff82 	bl	8005c54 <std>
 8005d50:	68a0      	ldr	r0, [r4, #8]
 8005d52:	2201      	movs	r2, #1
 8005d54:	2109      	movs	r1, #9
 8005d56:	f7ff ff7d 	bl	8005c54 <std>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	2112      	movs	r1, #18
 8005d60:	f7ff ff78 	bl	8005c54 <std>
 8005d64:	2301      	movs	r3, #1
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	e7d2      	b.n	8005d10 <__sinit+0xc>
 8005d6a:	bf00      	nop
 8005d6c:	08006ae4 	.word	0x08006ae4
 8005d70:	08005c9d 	.word	0x08005c9d

08005d74 <__sfp>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	4607      	mov	r7, r0
 8005d78:	f7ff ffac 	bl	8005cd4 <__sfp_lock_acquire>
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <__sfp+0x84>)
 8005d7e:	681e      	ldr	r6, [r3, #0]
 8005d80:	69b3      	ldr	r3, [r6, #24]
 8005d82:	b913      	cbnz	r3, 8005d8a <__sfp+0x16>
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff ffbd 	bl	8005d04 <__sinit>
 8005d8a:	3648      	adds	r6, #72	; 0x48
 8005d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	d503      	bpl.n	8005d9c <__sfp+0x28>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	b30b      	cbz	r3, 8005ddc <__sfp+0x68>
 8005d98:	6836      	ldr	r6, [r6, #0]
 8005d9a:	e7f7      	b.n	8005d8c <__sfp+0x18>
 8005d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005da0:	b9d5      	cbnz	r5, 8005dd8 <__sfp+0x64>
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <__sfp+0x88>)
 8005da4:	60e3      	str	r3, [r4, #12]
 8005da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005daa:	6665      	str	r5, [r4, #100]	; 0x64
 8005dac:	f000 f86c 	bl	8005e88 <__retarget_lock_init_recursive>
 8005db0:	f7ff ff96 	bl	8005ce0 <__sfp_lock_release>
 8005db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dbc:	6025      	str	r5, [r4, #0]
 8005dbe:	61a5      	str	r5, [r4, #24]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dc8:	f000 f861 	bl	8005e8e <memset>
 8005dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd8:	3468      	adds	r4, #104	; 0x68
 8005dda:	e7d9      	b.n	8005d90 <__sfp+0x1c>
 8005ddc:	2104      	movs	r1, #4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff ff62 	bl	8005ca8 <__sfmoreglue>
 8005de4:	4604      	mov	r4, r0
 8005de6:	6030      	str	r0, [r6, #0]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1d5      	bne.n	8005d98 <__sfp+0x24>
 8005dec:	f7ff ff78 	bl	8005ce0 <__sfp_lock_release>
 8005df0:	230c      	movs	r3, #12
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	e7ee      	b.n	8005dd4 <__sfp+0x60>
 8005df6:	bf00      	nop
 8005df8:	08006ae4 	.word	0x08006ae4
 8005dfc:	ffff0001 	.word	0xffff0001

08005e00 <_fwalk_reent>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4606      	mov	r6, r0
 8005e06:	4688      	mov	r8, r1
 8005e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e0c:	2700      	movs	r7, #0
 8005e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e12:	f1b9 0901 	subs.w	r9, r9, #1
 8005e16:	d505      	bpl.n	8005e24 <_fwalk_reent+0x24>
 8005e18:	6824      	ldr	r4, [r4, #0]
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	d1f7      	bne.n	8005e0e <_fwalk_reent+0xe>
 8005e1e:	4638      	mov	r0, r7
 8005e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e24:	89ab      	ldrh	r3, [r5, #12]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d907      	bls.n	8005e3a <_fwalk_reent+0x3a>
 8005e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	d003      	beq.n	8005e3a <_fwalk_reent+0x3a>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	47c0      	blx	r8
 8005e38:	4307      	orrs	r7, r0
 8005e3a:	3568      	adds	r5, #104	; 0x68
 8005e3c:	e7e9      	b.n	8005e12 <_fwalk_reent+0x12>
	...

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4d0d      	ldr	r5, [pc, #52]	; (8005e78 <__libc_init_array+0x38>)
 8005e44:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e46:	1b64      	subs	r4, r4, r5
 8005e48:	10a4      	asrs	r4, r4, #2
 8005e4a:	2600      	movs	r6, #0
 8005e4c:	42a6      	cmp	r6, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	4d0b      	ldr	r5, [pc, #44]	; (8005e80 <__libc_init_array+0x40>)
 8005e52:	4c0c      	ldr	r4, [pc, #48]	; (8005e84 <__libc_init_array+0x44>)
 8005e54:	f000 fdc0 	bl	80069d8 <_init>
 8005e58:	1b64      	subs	r4, r4, r5
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e68:	4798      	blx	r3
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	08006b24 	.word	0x08006b24
 8005e7c:	08006b24 	.word	0x08006b24
 8005e80:	08006b24 	.word	0x08006b24
 8005e84:	08006b28 	.word	0x08006b28

08005e88 <__retarget_lock_init_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <__retarget_lock_acquire_recursive>:
 8005e8a:	4770      	bx	lr

08005e8c <__retarget_lock_release_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <memset>:
 8005e8e:	4402      	add	r2, r0
 8005e90:	4603      	mov	r3, r0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d100      	bne.n	8005e98 <memset+0xa>
 8005e96:	4770      	bx	lr
 8005e98:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9c:	e7f9      	b.n	8005e92 <memset+0x4>
	...

08005ea0 <_free_r>:
 8005ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	d048      	beq.n	8005f38 <_free_r+0x98>
 8005ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eaa:	9001      	str	r0, [sp, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f1a1 0404 	sub.w	r4, r1, #4
 8005eb2:	bfb8      	it	lt
 8005eb4:	18e4      	addlt	r4, r4, r3
 8005eb6:	f000 fd4f 	bl	8006958 <__malloc_lock>
 8005eba:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <_free_r+0x9c>)
 8005ebc:	9801      	ldr	r0, [sp, #4]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	b933      	cbnz	r3, 8005ed2 <_free_r+0x32>
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	6014      	str	r4, [r2, #0]
 8005ec8:	b003      	add	sp, #12
 8005eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ece:	f000 bd49 	b.w	8006964 <__malloc_unlock>
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	d90b      	bls.n	8005eee <_free_r+0x4e>
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	1862      	adds	r2, r4, r1
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bf04      	itt	eq
 8005ede:	681a      	ldreq	r2, [r3, #0]
 8005ee0:	685b      	ldreq	r3, [r3, #4]
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	bf04      	itt	eq
 8005ee6:	1852      	addeq	r2, r2, r1
 8005ee8:	6022      	streq	r2, [r4, #0]
 8005eea:	602c      	str	r4, [r5, #0]
 8005eec:	e7ec      	b.n	8005ec8 <_free_r+0x28>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x58>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x4e>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1855      	adds	r5, r2, r1
 8005efc:	42a5      	cmp	r5, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x78>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	4421      	add	r1, r4
 8005f04:	1854      	adds	r4, r2, r1
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1dd      	bne.n	8005ec8 <_free_r+0x28>
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	4421      	add	r1, r4
 8005f14:	6011      	str	r1, [r2, #0]
 8005f16:	e7d7      	b.n	8005ec8 <_free_r+0x28>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x80>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	e7d3      	b.n	8005ec8 <_free_r+0x28>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf04      	itt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bf04      	itt	eq
 8005f30:	1949      	addeq	r1, r1, r5
 8005f32:	6021      	streq	r1, [r4, #0]
 8005f34:	6054      	str	r4, [r2, #4]
 8005f36:	e7c7      	b.n	8005ec8 <_free_r+0x28>
 8005f38:	b003      	add	sp, #12
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	200000a4 	.word	0x200000a4

08005f40 <_malloc_r>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	1ccd      	adds	r5, r1, #3
 8005f44:	f025 0503 	bic.w	r5, r5, #3
 8005f48:	3508      	adds	r5, #8
 8005f4a:	2d0c      	cmp	r5, #12
 8005f4c:	bf38      	it	cc
 8005f4e:	250c      	movcc	r5, #12
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	4606      	mov	r6, r0
 8005f54:	db01      	blt.n	8005f5a <_malloc_r+0x1a>
 8005f56:	42a9      	cmp	r1, r5
 8005f58:	d903      	bls.n	8005f62 <_malloc_r+0x22>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	2000      	movs	r0, #0
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f62:	f000 fcf9 	bl	8006958 <__malloc_lock>
 8005f66:	4921      	ldr	r1, [pc, #132]	; (8005fec <_malloc_r+0xac>)
 8005f68:	680a      	ldr	r2, [r1, #0]
 8005f6a:	4614      	mov	r4, r2
 8005f6c:	b99c      	cbnz	r4, 8005f96 <_malloc_r+0x56>
 8005f6e:	4f20      	ldr	r7, [pc, #128]	; (8005ff0 <_malloc_r+0xb0>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	b923      	cbnz	r3, 8005f7e <_malloc_r+0x3e>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 fb42 	bl	8006600 <_sbrk_r>
 8005f7c:	6038      	str	r0, [r7, #0]
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 fb3d 	bl	8006600 <_sbrk_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d123      	bne.n	8005fd2 <_malloc_r+0x92>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 fce8 	bl	8006964 <__malloc_unlock>
 8005f94:	e7e3      	b.n	8005f5e <_malloc_r+0x1e>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	1b5b      	subs	r3, r3, r5
 8005f9a:	d417      	bmi.n	8005fcc <_malloc_r+0x8c>
 8005f9c:	2b0b      	cmp	r3, #11
 8005f9e:	d903      	bls.n	8005fa8 <_malloc_r+0x68>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	441c      	add	r4, r3
 8005fa4:	6025      	str	r5, [r4, #0]
 8005fa6:	e004      	b.n	8005fb2 <_malloc_r+0x72>
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	42a2      	cmp	r2, r4
 8005fac:	bf0c      	ite	eq
 8005fae:	600b      	streq	r3, [r1, #0]
 8005fb0:	6053      	strne	r3, [r2, #4]
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 fcd6 	bl	8006964 <__malloc_unlock>
 8005fb8:	f104 000b 	add.w	r0, r4, #11
 8005fbc:	1d23      	adds	r3, r4, #4
 8005fbe:	f020 0007 	bic.w	r0, r0, #7
 8005fc2:	1ac2      	subs	r2, r0, r3
 8005fc4:	d0cc      	beq.n	8005f60 <_malloc_r+0x20>
 8005fc6:	1a1b      	subs	r3, r3, r0
 8005fc8:	50a3      	str	r3, [r4, r2]
 8005fca:	e7c9      	b.n	8005f60 <_malloc_r+0x20>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	6864      	ldr	r4, [r4, #4]
 8005fd0:	e7cc      	b.n	8005f6c <_malloc_r+0x2c>
 8005fd2:	1cc4      	adds	r4, r0, #3
 8005fd4:	f024 0403 	bic.w	r4, r4, #3
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d0e3      	beq.n	8005fa4 <_malloc_r+0x64>
 8005fdc:	1a21      	subs	r1, r4, r0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 fb0e 	bl	8006600 <_sbrk_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1dd      	bne.n	8005fa4 <_malloc_r+0x64>
 8005fe8:	e7cf      	b.n	8005f8a <_malloc_r+0x4a>
 8005fea:	bf00      	nop
 8005fec:	200000a4 	.word	0x200000a4
 8005ff0:	200000a8 	.word	0x200000a8

08005ff4 <__sfputc_r>:
 8005ff4:	6893      	ldr	r3, [r2, #8]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	b410      	push	{r4}
 8005ffc:	6093      	str	r3, [r2, #8]
 8005ffe:	da08      	bge.n	8006012 <__sfputc_r+0x1e>
 8006000:	6994      	ldr	r4, [r2, #24]
 8006002:	42a3      	cmp	r3, r4
 8006004:	db01      	blt.n	800600a <__sfputc_r+0x16>
 8006006:	290a      	cmp	r1, #10
 8006008:	d103      	bne.n	8006012 <__sfputc_r+0x1e>
 800600a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600e:	f000 bb4b 	b.w	80066a8 <__swbuf_r>
 8006012:	6813      	ldr	r3, [r2, #0]
 8006014:	1c58      	adds	r0, r3, #1
 8006016:	6010      	str	r0, [r2, #0]
 8006018:	7019      	strb	r1, [r3, #0]
 800601a:	4608      	mov	r0, r1
 800601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006020:	4770      	bx	lr

08006022 <__sfputs_r>:
 8006022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006024:	4606      	mov	r6, r0
 8006026:	460f      	mov	r7, r1
 8006028:	4614      	mov	r4, r2
 800602a:	18d5      	adds	r5, r2, r3
 800602c:	42ac      	cmp	r4, r5
 800602e:	d101      	bne.n	8006034 <__sfputs_r+0x12>
 8006030:	2000      	movs	r0, #0
 8006032:	e007      	b.n	8006044 <__sfputs_r+0x22>
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	463a      	mov	r2, r7
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff ffda 	bl	8005ff4 <__sfputc_r>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d1f3      	bne.n	800602c <__sfputs_r+0xa>
 8006044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006048 <_vfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	460d      	mov	r5, r1
 800604e:	b09d      	sub	sp, #116	; 0x74
 8006050:	4614      	mov	r4, r2
 8006052:	4698      	mov	r8, r3
 8006054:	4606      	mov	r6, r0
 8006056:	b118      	cbz	r0, 8006060 <_vfiprintf_r+0x18>
 8006058:	6983      	ldr	r3, [r0, #24]
 800605a:	b90b      	cbnz	r3, 8006060 <_vfiprintf_r+0x18>
 800605c:	f7ff fe52 	bl	8005d04 <__sinit>
 8006060:	4b89      	ldr	r3, [pc, #548]	; (8006288 <_vfiprintf_r+0x240>)
 8006062:	429d      	cmp	r5, r3
 8006064:	d11b      	bne.n	800609e <_vfiprintf_r+0x56>
 8006066:	6875      	ldr	r5, [r6, #4]
 8006068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606a:	07d9      	lsls	r1, r3, #31
 800606c:	d405      	bmi.n	800607a <_vfiprintf_r+0x32>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	059a      	lsls	r2, r3, #22
 8006072:	d402      	bmi.n	800607a <_vfiprintf_r+0x32>
 8006074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006076:	f7ff ff08 	bl	8005e8a <__retarget_lock_acquire_recursive>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	071b      	lsls	r3, r3, #28
 800607e:	d501      	bpl.n	8006084 <_vfiprintf_r+0x3c>
 8006080:	692b      	ldr	r3, [r5, #16]
 8006082:	b9eb      	cbnz	r3, 80060c0 <_vfiprintf_r+0x78>
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f000 fb72 	bl	8006770 <__swsetup_r>
 800608c:	b1c0      	cbz	r0, 80060c0 <_vfiprintf_r+0x78>
 800608e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006090:	07dc      	lsls	r4, r3, #31
 8006092:	d50e      	bpl.n	80060b2 <_vfiprintf_r+0x6a>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b01d      	add	sp, #116	; 0x74
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	4b7b      	ldr	r3, [pc, #492]	; (800628c <_vfiprintf_r+0x244>)
 80060a0:	429d      	cmp	r5, r3
 80060a2:	d101      	bne.n	80060a8 <_vfiprintf_r+0x60>
 80060a4:	68b5      	ldr	r5, [r6, #8]
 80060a6:	e7df      	b.n	8006068 <_vfiprintf_r+0x20>
 80060a8:	4b79      	ldr	r3, [pc, #484]	; (8006290 <_vfiprintf_r+0x248>)
 80060aa:	429d      	cmp	r5, r3
 80060ac:	bf08      	it	eq
 80060ae:	68f5      	ldreq	r5, [r6, #12]
 80060b0:	e7da      	b.n	8006068 <_vfiprintf_r+0x20>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	0598      	lsls	r0, r3, #22
 80060b6:	d4ed      	bmi.n	8006094 <_vfiprintf_r+0x4c>
 80060b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ba:	f7ff fee7 	bl	8005e8c <__retarget_lock_release_recursive>
 80060be:	e7e9      	b.n	8006094 <_vfiprintf_r+0x4c>
 80060c0:	2300      	movs	r3, #0
 80060c2:	9309      	str	r3, [sp, #36]	; 0x24
 80060c4:	2320      	movs	r3, #32
 80060c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ce:	2330      	movs	r3, #48	; 0x30
 80060d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006294 <_vfiprintf_r+0x24c>
 80060d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d8:	f04f 0901 	mov.w	r9, #1
 80060dc:	4623      	mov	r3, r4
 80060de:	469a      	mov	sl, r3
 80060e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e4:	b10a      	cbz	r2, 80060ea <_vfiprintf_r+0xa2>
 80060e6:	2a25      	cmp	r2, #37	; 0x25
 80060e8:	d1f9      	bne.n	80060de <_vfiprintf_r+0x96>
 80060ea:	ebba 0b04 	subs.w	fp, sl, r4
 80060ee:	d00b      	beq.n	8006108 <_vfiprintf_r+0xc0>
 80060f0:	465b      	mov	r3, fp
 80060f2:	4622      	mov	r2, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7ff ff93 	bl	8006022 <__sfputs_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	f000 80aa 	beq.w	8006256 <_vfiprintf_r+0x20e>
 8006102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006104:	445a      	add	r2, fp
 8006106:	9209      	str	r2, [sp, #36]	; 0x24
 8006108:	f89a 3000 	ldrb.w	r3, [sl]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80a2 	beq.w	8006256 <_vfiprintf_r+0x20e>
 8006112:	2300      	movs	r3, #0
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611c:	f10a 0a01 	add.w	sl, sl, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9307      	str	r3, [sp, #28]
 8006124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006128:	931a      	str	r3, [sp, #104]	; 0x68
 800612a:	4654      	mov	r4, sl
 800612c:	2205      	movs	r2, #5
 800612e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006132:	4858      	ldr	r0, [pc, #352]	; (8006294 <_vfiprintf_r+0x24c>)
 8006134:	f7fa f85c 	bl	80001f0 <memchr>
 8006138:	9a04      	ldr	r2, [sp, #16]
 800613a:	b9d8      	cbnz	r0, 8006174 <_vfiprintf_r+0x12c>
 800613c:	06d1      	lsls	r1, r2, #27
 800613e:	bf44      	itt	mi
 8006140:	2320      	movmi	r3, #32
 8006142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006146:	0713      	lsls	r3, r2, #28
 8006148:	bf44      	itt	mi
 800614a:	232b      	movmi	r3, #43	; 0x2b
 800614c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006150:	f89a 3000 	ldrb.w	r3, [sl]
 8006154:	2b2a      	cmp	r3, #42	; 0x2a
 8006156:	d015      	beq.n	8006184 <_vfiprintf_r+0x13c>
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	4654      	mov	r4, sl
 800615c:	2000      	movs	r0, #0
 800615e:	f04f 0c0a 	mov.w	ip, #10
 8006162:	4621      	mov	r1, r4
 8006164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006168:	3b30      	subs	r3, #48	; 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d94e      	bls.n	800620c <_vfiprintf_r+0x1c4>
 800616e:	b1b0      	cbz	r0, 800619e <_vfiprintf_r+0x156>
 8006170:	9207      	str	r2, [sp, #28]
 8006172:	e014      	b.n	800619e <_vfiprintf_r+0x156>
 8006174:	eba0 0308 	sub.w	r3, r0, r8
 8006178:	fa09 f303 	lsl.w	r3, r9, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	46a2      	mov	sl, r4
 8006182:	e7d2      	b.n	800612a <_vfiprintf_r+0xe2>
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	1d19      	adds	r1, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	9103      	str	r1, [sp, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfbb      	ittet	lt
 8006190:	425b      	neglt	r3, r3
 8006192:	f042 0202 	orrlt.w	r2, r2, #2
 8006196:	9307      	strge	r3, [sp, #28]
 8006198:	9307      	strlt	r3, [sp, #28]
 800619a:	bfb8      	it	lt
 800619c:	9204      	strlt	r2, [sp, #16]
 800619e:	7823      	ldrb	r3, [r4, #0]
 80061a0:	2b2e      	cmp	r3, #46	; 0x2e
 80061a2:	d10c      	bne.n	80061be <_vfiprintf_r+0x176>
 80061a4:	7863      	ldrb	r3, [r4, #1]
 80061a6:	2b2a      	cmp	r3, #42	; 0x2a
 80061a8:	d135      	bne.n	8006216 <_vfiprintf_r+0x1ce>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	9203      	str	r2, [sp, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfb8      	it	lt
 80061b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ba:	3402      	adds	r4, #2
 80061bc:	9305      	str	r3, [sp, #20]
 80061be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a4 <_vfiprintf_r+0x25c>
 80061c2:	7821      	ldrb	r1, [r4, #0]
 80061c4:	2203      	movs	r2, #3
 80061c6:	4650      	mov	r0, sl
 80061c8:	f7fa f812 	bl	80001f0 <memchr>
 80061cc:	b140      	cbz	r0, 80061e0 <_vfiprintf_r+0x198>
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	eba0 000a 	sub.w	r0, r0, sl
 80061d4:	fa03 f000 	lsl.w	r0, r3, r0
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	4303      	orrs	r3, r0
 80061dc:	3401      	adds	r4, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	482c      	ldr	r0, [pc, #176]	; (8006298 <_vfiprintf_r+0x250>)
 80061e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ea:	2206      	movs	r2, #6
 80061ec:	f7fa f800 	bl	80001f0 <memchr>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d03f      	beq.n	8006274 <_vfiprintf_r+0x22c>
 80061f4:	4b29      	ldr	r3, [pc, #164]	; (800629c <_vfiprintf_r+0x254>)
 80061f6:	bb1b      	cbnz	r3, 8006240 <_vfiprintf_r+0x1f8>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	3307      	adds	r3, #7
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	3308      	adds	r3, #8
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006206:	443b      	add	r3, r7
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	e767      	b.n	80060dc <_vfiprintf_r+0x94>
 800620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006210:	460c      	mov	r4, r1
 8006212:	2001      	movs	r0, #1
 8006214:	e7a5      	b.n	8006162 <_vfiprintf_r+0x11a>
 8006216:	2300      	movs	r3, #0
 8006218:	3401      	adds	r4, #1
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0c0a 	mov.w	ip, #10
 8006222:	4620      	mov	r0, r4
 8006224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006228:	3a30      	subs	r2, #48	; 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d903      	bls.n	8006236 <_vfiprintf_r+0x1ee>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c5      	beq.n	80061be <_vfiprintf_r+0x176>
 8006232:	9105      	str	r1, [sp, #20]
 8006234:	e7c3      	b.n	80061be <_vfiprintf_r+0x176>
 8006236:	fb0c 2101 	mla	r1, ip, r1, r2
 800623a:	4604      	mov	r4, r0
 800623c:	2301      	movs	r3, #1
 800623e:	e7f0      	b.n	8006222 <_vfiprintf_r+0x1da>
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	462a      	mov	r2, r5
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <_vfiprintf_r+0x258>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4630      	mov	r0, r6
 800624c:	f3af 8000 	nop.w
 8006250:	4607      	mov	r7, r0
 8006252:	1c78      	adds	r0, r7, #1
 8006254:	d1d6      	bne.n	8006204 <_vfiprintf_r+0x1bc>
 8006256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006258:	07d9      	lsls	r1, r3, #31
 800625a:	d405      	bmi.n	8006268 <_vfiprintf_r+0x220>
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	059a      	lsls	r2, r3, #22
 8006260:	d402      	bmi.n	8006268 <_vfiprintf_r+0x220>
 8006262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006264:	f7ff fe12 	bl	8005e8c <__retarget_lock_release_recursive>
 8006268:	89ab      	ldrh	r3, [r5, #12]
 800626a:	065b      	lsls	r3, r3, #25
 800626c:	f53f af12 	bmi.w	8006094 <_vfiprintf_r+0x4c>
 8006270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006272:	e711      	b.n	8006098 <_vfiprintf_r+0x50>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <_vfiprintf_r+0x258>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4630      	mov	r0, r6
 8006280:	f000 f880 	bl	8006384 <_printf_i>
 8006284:	e7e4      	b.n	8006250 <_vfiprintf_r+0x208>
 8006286:	bf00      	nop
 8006288:	08006aa4 	.word	0x08006aa4
 800628c:	08006ac4 	.word	0x08006ac4
 8006290:	08006a84 	.word	0x08006a84
 8006294:	08006ae8 	.word	0x08006ae8
 8006298:	08006af2 	.word	0x08006af2
 800629c:	00000000 	.word	0x00000000
 80062a0:	08006023 	.word	0x08006023
 80062a4:	08006aee 	.word	0x08006aee

080062a8 <_printf_common>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	4616      	mov	r6, r2
 80062ae:	4699      	mov	r9, r3
 80062b0:	688a      	ldr	r2, [r1, #8]
 80062b2:	690b      	ldr	r3, [r1, #16]
 80062b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bfb8      	it	lt
 80062bc:	4613      	movlt	r3, r2
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c4:	4607      	mov	r7, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	b10a      	cbz	r2, 80062ce <_printf_common+0x26>
 80062ca:	3301      	adds	r3, #1
 80062cc:	6033      	str	r3, [r6, #0]
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	0699      	lsls	r1, r3, #26
 80062d2:	bf42      	ittt	mi
 80062d4:	6833      	ldrmi	r3, [r6, #0]
 80062d6:	3302      	addmi	r3, #2
 80062d8:	6033      	strmi	r3, [r6, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	f015 0506 	ands.w	r5, r5, #6
 80062e0:	d106      	bne.n	80062f0 <_printf_common+0x48>
 80062e2:	f104 0a19 	add.w	sl, r4, #25
 80062e6:	68e3      	ldr	r3, [r4, #12]
 80062e8:	6832      	ldr	r2, [r6, #0]
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	dc26      	bgt.n	800633e <_printf_common+0x96>
 80062f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f4:	1e13      	subs	r3, r2, #0
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	bf18      	it	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	0692      	lsls	r2, r2, #26
 80062fe:	d42b      	bmi.n	8006358 <_printf_common+0xb0>
 8006300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006304:	4649      	mov	r1, r9
 8006306:	4638      	mov	r0, r7
 8006308:	47c0      	blx	r8
 800630a:	3001      	adds	r0, #1
 800630c:	d01e      	beq.n	800634c <_printf_common+0xa4>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	68e5      	ldr	r5, [r4, #12]
 8006312:	6832      	ldr	r2, [r6, #0]
 8006314:	f003 0306 	and.w	r3, r3, #6
 8006318:	2b04      	cmp	r3, #4
 800631a:	bf08      	it	eq
 800631c:	1aad      	subeq	r5, r5, r2
 800631e:	68a3      	ldr	r3, [r4, #8]
 8006320:	6922      	ldr	r2, [r4, #16]
 8006322:	bf0c      	ite	eq
 8006324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006328:	2500      	movne	r5, #0
 800632a:	4293      	cmp	r3, r2
 800632c:	bfc4      	itt	gt
 800632e:	1a9b      	subgt	r3, r3, r2
 8006330:	18ed      	addgt	r5, r5, r3
 8006332:	2600      	movs	r6, #0
 8006334:	341a      	adds	r4, #26
 8006336:	42b5      	cmp	r5, r6
 8006338:	d11a      	bne.n	8006370 <_printf_common+0xc8>
 800633a:	2000      	movs	r0, #0
 800633c:	e008      	b.n	8006350 <_printf_common+0xa8>
 800633e:	2301      	movs	r3, #1
 8006340:	4652      	mov	r2, sl
 8006342:	4649      	mov	r1, r9
 8006344:	4638      	mov	r0, r7
 8006346:	47c0      	blx	r8
 8006348:	3001      	adds	r0, #1
 800634a:	d103      	bne.n	8006354 <_printf_common+0xac>
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006354:	3501      	adds	r5, #1
 8006356:	e7c6      	b.n	80062e6 <_printf_common+0x3e>
 8006358:	18e1      	adds	r1, r4, r3
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	2030      	movs	r0, #48	; 0x30
 800635e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006362:	4422      	add	r2, r4
 8006364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800636c:	3302      	adds	r3, #2
 800636e:	e7c7      	b.n	8006300 <_printf_common+0x58>
 8006370:	2301      	movs	r3, #1
 8006372:	4622      	mov	r2, r4
 8006374:	4649      	mov	r1, r9
 8006376:	4638      	mov	r0, r7
 8006378:	47c0      	blx	r8
 800637a:	3001      	adds	r0, #1
 800637c:	d0e6      	beq.n	800634c <_printf_common+0xa4>
 800637e:	3601      	adds	r6, #1
 8006380:	e7d9      	b.n	8006336 <_printf_common+0x8e>
	...

08006384 <_printf_i>:
 8006384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	460c      	mov	r4, r1
 800638a:	4691      	mov	r9, r2
 800638c:	7e27      	ldrb	r7, [r4, #24]
 800638e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006390:	2f78      	cmp	r7, #120	; 0x78
 8006392:	4680      	mov	r8, r0
 8006394:	469a      	mov	sl, r3
 8006396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800639a:	d807      	bhi.n	80063ac <_printf_i+0x28>
 800639c:	2f62      	cmp	r7, #98	; 0x62
 800639e:	d80a      	bhi.n	80063b6 <_printf_i+0x32>
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	f000 80d8 	beq.w	8006556 <_printf_i+0x1d2>
 80063a6:	2f58      	cmp	r7, #88	; 0x58
 80063a8:	f000 80a3 	beq.w	80064f2 <_printf_i+0x16e>
 80063ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b4:	e03a      	b.n	800642c <_printf_i+0xa8>
 80063b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ba:	2b15      	cmp	r3, #21
 80063bc:	d8f6      	bhi.n	80063ac <_printf_i+0x28>
 80063be:	a001      	add	r0, pc, #4	; (adr r0, 80063c4 <_printf_i+0x40>)
 80063c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	08006431 	.word	0x08006431
 80063cc:	080063ad 	.word	0x080063ad
 80063d0:	080063ad 	.word	0x080063ad
 80063d4:	080063ad 	.word	0x080063ad
 80063d8:	080063ad 	.word	0x080063ad
 80063dc:	08006431 	.word	0x08006431
 80063e0:	080063ad 	.word	0x080063ad
 80063e4:	080063ad 	.word	0x080063ad
 80063e8:	080063ad 	.word	0x080063ad
 80063ec:	080063ad 	.word	0x080063ad
 80063f0:	0800653d 	.word	0x0800653d
 80063f4:	08006461 	.word	0x08006461
 80063f8:	0800651f 	.word	0x0800651f
 80063fc:	080063ad 	.word	0x080063ad
 8006400:	080063ad 	.word	0x080063ad
 8006404:	0800655f 	.word	0x0800655f
 8006408:	080063ad 	.word	0x080063ad
 800640c:	08006461 	.word	0x08006461
 8006410:	080063ad 	.word	0x080063ad
 8006414:	080063ad 	.word	0x080063ad
 8006418:	08006527 	.word	0x08006527
 800641c:	680b      	ldr	r3, [r1, #0]
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	600a      	str	r2, [r1, #0]
 8006424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800642c:	2301      	movs	r3, #1
 800642e:	e0a3      	b.n	8006578 <_printf_i+0x1f4>
 8006430:	6825      	ldr	r5, [r4, #0]
 8006432:	6808      	ldr	r0, [r1, #0]
 8006434:	062e      	lsls	r6, r5, #24
 8006436:	f100 0304 	add.w	r3, r0, #4
 800643a:	d50a      	bpl.n	8006452 <_printf_i+0xce>
 800643c:	6805      	ldr	r5, [r0, #0]
 800643e:	600b      	str	r3, [r1, #0]
 8006440:	2d00      	cmp	r5, #0
 8006442:	da03      	bge.n	800644c <_printf_i+0xc8>
 8006444:	232d      	movs	r3, #45	; 0x2d
 8006446:	426d      	negs	r5, r5
 8006448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644c:	485e      	ldr	r0, [pc, #376]	; (80065c8 <_printf_i+0x244>)
 800644e:	230a      	movs	r3, #10
 8006450:	e019      	b.n	8006486 <_printf_i+0x102>
 8006452:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006456:	6805      	ldr	r5, [r0, #0]
 8006458:	600b      	str	r3, [r1, #0]
 800645a:	bf18      	it	ne
 800645c:	b22d      	sxthne	r5, r5
 800645e:	e7ef      	b.n	8006440 <_printf_i+0xbc>
 8006460:	680b      	ldr	r3, [r1, #0]
 8006462:	6825      	ldr	r5, [r4, #0]
 8006464:	1d18      	adds	r0, r3, #4
 8006466:	6008      	str	r0, [r1, #0]
 8006468:	0628      	lsls	r0, r5, #24
 800646a:	d501      	bpl.n	8006470 <_printf_i+0xec>
 800646c:	681d      	ldr	r5, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0xf2>
 8006470:	0669      	lsls	r1, r5, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0xe8>
 8006474:	881d      	ldrh	r5, [r3, #0]
 8006476:	4854      	ldr	r0, [pc, #336]	; (80065c8 <_printf_i+0x244>)
 8006478:	2f6f      	cmp	r7, #111	; 0x6f
 800647a:	bf0c      	ite	eq
 800647c:	2308      	moveq	r3, #8
 800647e:	230a      	movne	r3, #10
 8006480:	2100      	movs	r1, #0
 8006482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006486:	6866      	ldr	r6, [r4, #4]
 8006488:	60a6      	str	r6, [r4, #8]
 800648a:	2e00      	cmp	r6, #0
 800648c:	bfa2      	ittt	ge
 800648e:	6821      	ldrge	r1, [r4, #0]
 8006490:	f021 0104 	bicge.w	r1, r1, #4
 8006494:	6021      	strge	r1, [r4, #0]
 8006496:	b90d      	cbnz	r5, 800649c <_printf_i+0x118>
 8006498:	2e00      	cmp	r6, #0
 800649a:	d04d      	beq.n	8006538 <_printf_i+0x1b4>
 800649c:	4616      	mov	r6, r2
 800649e:	fbb5 f1f3 	udiv	r1, r5, r3
 80064a2:	fb03 5711 	mls	r7, r3, r1, r5
 80064a6:	5dc7      	ldrb	r7, [r0, r7]
 80064a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ac:	462f      	mov	r7, r5
 80064ae:	42bb      	cmp	r3, r7
 80064b0:	460d      	mov	r5, r1
 80064b2:	d9f4      	bls.n	800649e <_printf_i+0x11a>
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d10b      	bne.n	80064d0 <_printf_i+0x14c>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	07df      	lsls	r7, r3, #31
 80064bc:	d508      	bpl.n	80064d0 <_printf_i+0x14c>
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	6861      	ldr	r1, [r4, #4]
 80064c2:	4299      	cmp	r1, r3
 80064c4:	bfde      	ittt	le
 80064c6:	2330      	movle	r3, #48	; 0x30
 80064c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064d0:	1b92      	subs	r2, r2, r6
 80064d2:	6122      	str	r2, [r4, #16]
 80064d4:	f8cd a000 	str.w	sl, [sp]
 80064d8:	464b      	mov	r3, r9
 80064da:	aa03      	add	r2, sp, #12
 80064dc:	4621      	mov	r1, r4
 80064de:	4640      	mov	r0, r8
 80064e0:	f7ff fee2 	bl	80062a8 <_printf_common>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d14c      	bne.n	8006582 <_printf_i+0x1fe>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	b004      	add	sp, #16
 80064ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f2:	4835      	ldr	r0, [pc, #212]	; (80065c8 <_printf_i+0x244>)
 80064f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	680e      	ldr	r6, [r1, #0]
 80064fc:	061f      	lsls	r7, r3, #24
 80064fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006502:	600e      	str	r6, [r1, #0]
 8006504:	d514      	bpl.n	8006530 <_printf_i+0x1ac>
 8006506:	07d9      	lsls	r1, r3, #31
 8006508:	bf44      	itt	mi
 800650a:	f043 0320 	orrmi.w	r3, r3, #32
 800650e:	6023      	strmi	r3, [r4, #0]
 8006510:	b91d      	cbnz	r5, 800651a <_printf_i+0x196>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f023 0320 	bic.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	2310      	movs	r3, #16
 800651c:	e7b0      	b.n	8006480 <_printf_i+0xfc>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	f043 0320 	orr.w	r3, r3, #32
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	2378      	movs	r3, #120	; 0x78
 8006528:	4828      	ldr	r0, [pc, #160]	; (80065cc <_printf_i+0x248>)
 800652a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800652e:	e7e3      	b.n	80064f8 <_printf_i+0x174>
 8006530:	065e      	lsls	r6, r3, #25
 8006532:	bf48      	it	mi
 8006534:	b2ad      	uxthmi	r5, r5
 8006536:	e7e6      	b.n	8006506 <_printf_i+0x182>
 8006538:	4616      	mov	r6, r2
 800653a:	e7bb      	b.n	80064b4 <_printf_i+0x130>
 800653c:	680b      	ldr	r3, [r1, #0]
 800653e:	6826      	ldr	r6, [r4, #0]
 8006540:	6960      	ldr	r0, [r4, #20]
 8006542:	1d1d      	adds	r5, r3, #4
 8006544:	600d      	str	r5, [r1, #0]
 8006546:	0635      	lsls	r5, r6, #24
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	d501      	bpl.n	8006550 <_printf_i+0x1cc>
 800654c:	6018      	str	r0, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0x1d2>
 8006550:	0671      	lsls	r1, r6, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0x1c8>
 8006554:	8018      	strh	r0, [r3, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	4616      	mov	r6, r2
 800655c:	e7ba      	b.n	80064d4 <_printf_i+0x150>
 800655e:	680b      	ldr	r3, [r1, #0]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	600a      	str	r2, [r1, #0]
 8006564:	681e      	ldr	r6, [r3, #0]
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	2100      	movs	r1, #0
 800656a:	4630      	mov	r0, r6
 800656c:	f7f9 fe40 	bl	80001f0 <memchr>
 8006570:	b108      	cbz	r0, 8006576 <_printf_i+0x1f2>
 8006572:	1b80      	subs	r0, r0, r6
 8006574:	6060      	str	r0, [r4, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	2300      	movs	r3, #0
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006580:	e7a8      	b.n	80064d4 <_printf_i+0x150>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	4632      	mov	r2, r6
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	47d0      	blx	sl
 800658c:	3001      	adds	r0, #1
 800658e:	d0ab      	beq.n	80064e8 <_printf_i+0x164>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	079b      	lsls	r3, r3, #30
 8006594:	d413      	bmi.n	80065be <_printf_i+0x23a>
 8006596:	68e0      	ldr	r0, [r4, #12]
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	4298      	cmp	r0, r3
 800659c:	bfb8      	it	lt
 800659e:	4618      	movlt	r0, r3
 80065a0:	e7a4      	b.n	80064ec <_printf_i+0x168>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d09b      	beq.n	80064e8 <_printf_i+0x164>
 80065b0:	3501      	adds	r5, #1
 80065b2:	68e3      	ldr	r3, [r4, #12]
 80065b4:	9903      	ldr	r1, [sp, #12]
 80065b6:	1a5b      	subs	r3, r3, r1
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	dcf2      	bgt.n	80065a2 <_printf_i+0x21e>
 80065bc:	e7eb      	b.n	8006596 <_printf_i+0x212>
 80065be:	2500      	movs	r5, #0
 80065c0:	f104 0619 	add.w	r6, r4, #25
 80065c4:	e7f5      	b.n	80065b2 <_printf_i+0x22e>
 80065c6:	bf00      	nop
 80065c8:	08006af9 	.word	0x08006af9
 80065cc:	08006b0a 	.word	0x08006b0a

080065d0 <iprintf>:
 80065d0:	b40f      	push	{r0, r1, r2, r3}
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <iprintf+0x2c>)
 80065d4:	b513      	push	{r0, r1, r4, lr}
 80065d6:	681c      	ldr	r4, [r3, #0]
 80065d8:	b124      	cbz	r4, 80065e4 <iprintf+0x14>
 80065da:	69a3      	ldr	r3, [r4, #24]
 80065dc:	b913      	cbnz	r3, 80065e4 <iprintf+0x14>
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fb90 	bl	8005d04 <__sinit>
 80065e4:	ab05      	add	r3, sp, #20
 80065e6:	9a04      	ldr	r2, [sp, #16]
 80065e8:	68a1      	ldr	r1, [r4, #8]
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7ff fd2b 	bl	8006048 <_vfiprintf_r>
 80065f2:	b002      	add	sp, #8
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	b004      	add	sp, #16
 80065fa:	4770      	bx	lr
 80065fc:	20000010 	.word	0x20000010

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fa fd3c 	bl	8001088 <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	200259f4 	.word	0x200259f4

08006620 <__sread>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	f000 f9a2 	bl	8006970 <_read_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	bfab      	itete	ge
 8006630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006632:	89a3      	ldrhlt	r3, [r4, #12]
 8006634:	181b      	addge	r3, r3, r0
 8006636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800663a:	bfac      	ite	ge
 800663c:	6563      	strge	r3, [r4, #84]	; 0x54
 800663e:	81a3      	strhlt	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__swrite>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	461f      	mov	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	05db      	lsls	r3, r3, #23
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4616      	mov	r6, r2
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1e>
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	2302      	movs	r3, #2
 800665a:	2200      	movs	r2, #0
 800665c:	f000 f906 	bl	800686c <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f000 b869 	b.w	800674c <_write_r>

0800667a <__sseek>:
 800667a:	b510      	push	{r4, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 f8f3 	bl	800686c <_lseek_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	bf15      	itete	ne
 800668c:	6560      	strne	r0, [r4, #84]	; 0x54
 800668e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006696:	81a3      	strheq	r3, [r4, #12]
 8006698:	bf18      	it	ne
 800669a:	81a3      	strhne	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__sclose>:
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 b8d3 	b.w	800684c <_close_r>
	...

080066a8 <__swbuf_r>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	460e      	mov	r6, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	4605      	mov	r5, r0
 80066b0:	b118      	cbz	r0, 80066ba <__swbuf_r+0x12>
 80066b2:	6983      	ldr	r3, [r0, #24]
 80066b4:	b90b      	cbnz	r3, 80066ba <__swbuf_r+0x12>
 80066b6:	f7ff fb25 	bl	8005d04 <__sinit>
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <__swbuf_r+0x98>)
 80066bc:	429c      	cmp	r4, r3
 80066be:	d12b      	bne.n	8006718 <__swbuf_r+0x70>
 80066c0:	686c      	ldr	r4, [r5, #4]
 80066c2:	69a3      	ldr	r3, [r4, #24]
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	071a      	lsls	r2, r3, #28
 80066ca:	d52f      	bpl.n	800672c <__swbuf_r+0x84>
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b36b      	cbz	r3, 800672c <__swbuf_r+0x84>
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	6963      	ldr	r3, [r4, #20]
 80066d8:	b2f6      	uxtb	r6, r6
 80066da:	4283      	cmp	r3, r0
 80066dc:	4637      	mov	r7, r6
 80066de:	dc04      	bgt.n	80066ea <__swbuf_r+0x42>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff fa7a 	bl	8005bdc <_fflush_r>
 80066e8:	bb30      	cbnz	r0, 8006738 <__swbuf_r+0x90>
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	701e      	strb	r6, [r3, #0]
 80066f8:	6963      	ldr	r3, [r4, #20]
 80066fa:	3001      	adds	r0, #1
 80066fc:	4283      	cmp	r3, r0
 80066fe:	d004      	beq.n	800670a <__swbuf_r+0x62>
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	07db      	lsls	r3, r3, #31
 8006704:	d506      	bpl.n	8006714 <__swbuf_r+0x6c>
 8006706:	2e0a      	cmp	r6, #10
 8006708:	d104      	bne.n	8006714 <__swbuf_r+0x6c>
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	f7ff fa65 	bl	8005bdc <_fflush_r>
 8006712:	b988      	cbnz	r0, 8006738 <__swbuf_r+0x90>
 8006714:	4638      	mov	r0, r7
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <__swbuf_r+0x9c>)
 800671a:	429c      	cmp	r4, r3
 800671c:	d101      	bne.n	8006722 <__swbuf_r+0x7a>
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	e7cf      	b.n	80066c2 <__swbuf_r+0x1a>
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <__swbuf_r+0xa0>)
 8006724:	429c      	cmp	r4, r3
 8006726:	bf08      	it	eq
 8006728:	68ec      	ldreq	r4, [r5, #12]
 800672a:	e7ca      	b.n	80066c2 <__swbuf_r+0x1a>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f81e 	bl	8006770 <__swsetup_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	d0cb      	beq.n	80066d0 <__swbuf_r+0x28>
 8006738:	f04f 37ff 	mov.w	r7, #4294967295
 800673c:	e7ea      	b.n	8006714 <__swbuf_r+0x6c>
 800673e:	bf00      	nop
 8006740:	08006aa4 	.word	0x08006aa4
 8006744:	08006ac4 	.word	0x08006ac4
 8006748:	08006a84 	.word	0x08006a84

0800674c <_write_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	; (800676c <_write_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fa fc43 	bl	8000fe6 <_write>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_write_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_write_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200259f4 	.word	0x200259f4

08006770 <__swsetup_r>:
 8006770:	4b32      	ldr	r3, [pc, #200]	; (800683c <__swsetup_r+0xcc>)
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	4606      	mov	r6, r0
 8006778:	460c      	mov	r4, r1
 800677a:	b125      	cbz	r5, 8006786 <__swsetup_r+0x16>
 800677c:	69ab      	ldr	r3, [r5, #24]
 800677e:	b913      	cbnz	r3, 8006786 <__swsetup_r+0x16>
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fabf 	bl	8005d04 <__sinit>
 8006786:	4b2e      	ldr	r3, [pc, #184]	; (8006840 <__swsetup_r+0xd0>)
 8006788:	429c      	cmp	r4, r3
 800678a:	d10f      	bne.n	80067ac <__swsetup_r+0x3c>
 800678c:	686c      	ldr	r4, [r5, #4]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006794:	0719      	lsls	r1, r3, #28
 8006796:	d42c      	bmi.n	80067f2 <__swsetup_r+0x82>
 8006798:	06dd      	lsls	r5, r3, #27
 800679a:	d411      	bmi.n	80067c0 <__swsetup_r+0x50>
 800679c:	2309      	movs	r3, #9
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	e03e      	b.n	800682a <__swsetup_r+0xba>
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <__swsetup_r+0xd4>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <__swsetup_r+0x46>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7eb      	b.n	800678e <__swsetup_r+0x1e>
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <__swsetup_r+0xd8>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7e6      	b.n	800678e <__swsetup_r+0x1e>
 80067c0:	0758      	lsls	r0, r3, #29
 80067c2:	d512      	bpl.n	80067ea <__swsetup_r+0x7a>
 80067c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c6:	b141      	cbz	r1, 80067da <__swsetup_r+0x6a>
 80067c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <__swsetup_r+0x66>
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fb65 	bl	8005ea0 <_free_r>
 80067d6:	2300      	movs	r3, #0
 80067d8:	6363      	str	r3, [r4, #52]	; 0x34
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6063      	str	r3, [r4, #4]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0308 	orr.w	r3, r3, #8
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	b94b      	cbnz	r3, 800680a <__swsetup_r+0x9a>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006800:	d003      	beq.n	800680a <__swsetup_r+0x9a>
 8006802:	4621      	mov	r1, r4
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f867 	bl	80068d8 <__smakebuf_r>
 800680a:	89a0      	ldrh	r0, [r4, #12]
 800680c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006810:	f010 0301 	ands.w	r3, r0, #1
 8006814:	d00a      	beq.n	800682c <__swsetup_r+0xbc>
 8006816:	2300      	movs	r3, #0
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	6963      	ldr	r3, [r4, #20]
 800681c:	425b      	negs	r3, r3
 800681e:	61a3      	str	r3, [r4, #24]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b943      	cbnz	r3, 8006836 <__swsetup_r+0xc6>
 8006824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006828:	d1ba      	bne.n	80067a0 <__swsetup_r+0x30>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	0781      	lsls	r1, r0, #30
 800682e:	bf58      	it	pl
 8006830:	6963      	ldrpl	r3, [r4, #20]
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	e7f4      	b.n	8006820 <__swsetup_r+0xb0>
 8006836:	2000      	movs	r0, #0
 8006838:	e7f7      	b.n	800682a <__swsetup_r+0xba>
 800683a:	bf00      	nop
 800683c:	20000010 	.word	0x20000010
 8006840:	08006aa4 	.word	0x08006aa4
 8006844:	08006ac4 	.word	0x08006ac4
 8006848:	08006a84 	.word	0x08006a84

0800684c <_close_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d06      	ldr	r5, [pc, #24]	; (8006868 <_close_r+0x1c>)
 8006850:	2300      	movs	r3, #0
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fa fbe1 	bl	800101e <_close>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_close_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_close_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	200259f4 	.word	0x200259f4

0800686c <_lseek_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d07      	ldr	r5, [pc, #28]	; (800688c <_lseek_r+0x20>)
 8006870:	4604      	mov	r4, r0
 8006872:	4608      	mov	r0, r1
 8006874:	4611      	mov	r1, r2
 8006876:	2200      	movs	r2, #0
 8006878:	602a      	str	r2, [r5, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	f7fa fbf6 	bl	800106c <_lseek>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_lseek_r+0x1e>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_lseek_r+0x1e>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	200259f4 	.word	0x200259f4

08006890 <__swhatbuf_r>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	460e      	mov	r6, r1
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	2900      	cmp	r1, #0
 800689a:	b096      	sub	sp, #88	; 0x58
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	da07      	bge.n	80068b2 <__swhatbuf_r+0x22>
 80068a2:	2300      	movs	r3, #0
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	89b3      	ldrh	r3, [r6, #12]
 80068a8:	061a      	lsls	r2, r3, #24
 80068aa:	d410      	bmi.n	80068ce <__swhatbuf_r+0x3e>
 80068ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b0:	e00e      	b.n	80068d0 <__swhatbuf_r+0x40>
 80068b2:	466a      	mov	r2, sp
 80068b4:	f000 f86e 	bl	8006994 <_fstat_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	dbf2      	blt.n	80068a2 <__swhatbuf_r+0x12>
 80068bc:	9a01      	ldr	r2, [sp, #4]
 80068be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068c6:	425a      	negs	r2, r3
 80068c8:	415a      	adcs	r2, r3
 80068ca:	602a      	str	r2, [r5, #0]
 80068cc:	e7ee      	b.n	80068ac <__swhatbuf_r+0x1c>
 80068ce:	2340      	movs	r3, #64	; 0x40
 80068d0:	2000      	movs	r0, #0
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	b016      	add	sp, #88	; 0x58
 80068d6:	bd70      	pop	{r4, r5, r6, pc}

080068d8 <__smakebuf_r>:
 80068d8:	898b      	ldrh	r3, [r1, #12]
 80068da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068dc:	079d      	lsls	r5, r3, #30
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	d507      	bpl.n	80068f4 <__smakebuf_r+0x1c>
 80068e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	2301      	movs	r3, #1
 80068ee:	6163      	str	r3, [r4, #20]
 80068f0:	b002      	add	sp, #8
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	ab01      	add	r3, sp, #4
 80068f6:	466a      	mov	r2, sp
 80068f8:	f7ff ffca 	bl	8006890 <__swhatbuf_r>
 80068fc:	9900      	ldr	r1, [sp, #0]
 80068fe:	4605      	mov	r5, r0
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fb1d 	bl	8005f40 <_malloc_r>
 8006906:	b948      	cbnz	r0, 800691c <__smakebuf_r+0x44>
 8006908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690c:	059a      	lsls	r2, r3, #22
 800690e:	d4ef      	bmi.n	80068f0 <__smakebuf_r+0x18>
 8006910:	f023 0303 	bic.w	r3, r3, #3
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	e7e3      	b.n	80068e4 <__smakebuf_r+0xc>
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <__smakebuf_r+0x7c>)
 800691e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	6020      	str	r0, [r4, #0]
 8006924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	9b00      	ldr	r3, [sp, #0]
 800692c:	6163      	str	r3, [r4, #20]
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	6120      	str	r0, [r4, #16]
 8006932:	b15b      	cbz	r3, 800694c <__smakebuf_r+0x74>
 8006934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006938:	4630      	mov	r0, r6
 800693a:	f000 f83d 	bl	80069b8 <_isatty_r>
 800693e:	b128      	cbz	r0, 800694c <__smakebuf_r+0x74>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	81a3      	strh	r3, [r4, #12]
 800694c:	89a0      	ldrh	r0, [r4, #12]
 800694e:	4305      	orrs	r5, r0
 8006950:	81a5      	strh	r5, [r4, #12]
 8006952:	e7cd      	b.n	80068f0 <__smakebuf_r+0x18>
 8006954:	08005c9d 	.word	0x08005c9d

08006958 <__malloc_lock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_lock+0x8>)
 800695a:	f7ff ba96 	b.w	8005e8a <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	200259ec 	.word	0x200259ec

08006964 <__malloc_unlock>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__malloc_unlock+0x8>)
 8006966:	f7ff ba91 	b.w	8005e8c <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	200259ec 	.word	0x200259ec

08006970 <_read_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	; (8006990 <_read_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fa fb14 	bl	8000fac <_read>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_read_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_read_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	200259f4 	.word	0x200259f4

08006994 <_fstat_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	; (80069b4 <_fstat_r+0x20>)
 8006998:	2300      	movs	r3, #0
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	f7fa fb48 	bl	8001036 <_fstat>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d102      	bne.n	80069b0 <_fstat_r+0x1c>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	b103      	cbz	r3, 80069b0 <_fstat_r+0x1c>
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
 80069b2:	bf00      	nop
 80069b4:	200259f4 	.word	0x200259f4

080069b8 <_isatty_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d06      	ldr	r5, [pc, #24]	; (80069d4 <_isatty_r+0x1c>)
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fa fb47 	bl	8001056 <_isatty>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_isatty_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_isatty_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	200259f4 	.word	0x200259f4

080069d8 <_init>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr

080069e4 <_fini>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr
